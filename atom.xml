<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Allever Blog</title>
  <subtitle>Android Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://devallever.github.io/"/>
  <updated>2017-05-19T09:58:34.929Z</updated>
  <id>https://devallever.github.io/</id>
  
  <author>
    <name>Allever</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb 项目搭建Hibernate环境</title>
    <link href="https://devallever.github.io/2017/05/19/hibernate-config/"/>
    <id>https://devallever.github.io/2017/05/19/hibernate-config/</id>
    <published>2017-05-19T08:31:34.000Z</published>
    <updated>2017-05-19T09:58:34.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Eclipse</li>
<li>MySQL</li>
</ul>
<h1 id="下载Hibernate所需jar包"><a href="#下载Hibernate所需jar包" class="headerlink" title="下载Hibernate所需jar包"></a>下载Hibernate所需jar包</h1><p>可到官网下载: <a href="http://hibernate.org/orm/" target="_blank" rel="external">快速通道</a>  </p>
<p>下载好后解压，打开压缩包下的lib目录下的require文件夹，这是hibernate的所以来的必须的jar包，copy到Project/WebContent/WEB-INF/lib 目录下，并添加依赖, 没有的自行创建  </p>
<p>由于我们需要连接MySQL数据库，将所需的mysql-connector-java-5.0.8-bin.jar引用进去，关于这些jar包，可以在网上搜索。  </p>
<blockquote>
<p>注意这里我用的是4.2版本的hibernate-core-4.2.1.Final.jar</p>
</blockquote>
<h1 id="配置Hibernate-conf-xml"><a href="#配置Hibernate-conf-xml" class="headerlink" title="配置Hibernate.conf.xml"></a>配置Hibernate.conf.xml</h1><p>我们需要配置最重要的hibernate配置文件hibernate.cfg.xml以及进行日志处理的log4j.properties属性文件：打开上一步解压后的hibernate文件夹，打开project—&gt;etc文件夹，将该文件夹下的hibernate.cfg.xml和log4j.properties文件拷贝到项目的src文件夹下，打开hibernate.cfg.xml文件，将session-factory标签中的内容替换成如下的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;session-factory&gt;</div><div class="line">	&lt;!-- MySQL --&gt;</div><div class="line">	&lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost:3306?useUnicode=true&amp;amp;characterEncoding=UTF-8&lt;/property&gt; </div><div class="line">	&lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; </div><div class="line">	&lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt; </div><div class="line">	&lt;property name=&quot;hibernate.connection.password&quot;&gt;dixm&lt;/property&gt;</div><div class="line">	&lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/property&gt; </div><div class="line">	&lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt;</div><div class="line">	&lt;property name=&quot;hibernate.use_sql_comments&quot;&gt;true&lt;/property&gt; </div><div class="line">	&lt;property name=&quot;hibernate.connection.pool_size&quot;&gt;0&lt;/property&gt;</div><div class="line">	</div><div class="line">	&lt;!-- Mappings  --&gt;</div><div class="line">	</div><div class="line">&lt;/session-factory&gt;</div></pre></td></tr></table></figure></p>
<h1 id="自动生成数据库表"><a href="#自动生成数据库表" class="headerlink" title="自动生成数据库表"></a>自动生成数据库表</h1><h2 id="创建DDLCreator类"><a href="#创建DDLCreator类" class="headerlink" title="创建DDLCreator类"></a>创建DDLCreator类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import org.hibernate.cfg.Configuration;</div><div class="line">import org.hibernate.tool.hbm2ddl.SchemaExport;</div><div class="line"></div><div class="line">public class DDLCreator &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @param args</div><div class="line">	 */</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Configuration cfg = new Configuration().configure();</div><div class="line">		SchemaExport se = new SchemaExport(cfg);</div><div class="line">		se.drop(true, true);    //ɾ</div><div class="line">		se.create(true, true);  //</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建HibernateUtil类"><a href="#创建HibernateUtil类" class="headerlink" title="创建HibernateUtil类"></a>创建HibernateUtil类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">import org.hibernate.Session;</div><div class="line">import org.hibernate.SessionFactory;</div><div class="line">import org.hibernate.Transaction;</div><div class="line">import org.hibernate.cfg.Configuration;</div><div class="line"></div><div class="line"></div><div class="line">@SuppressWarnings(&quot;deprecation&quot;)</div><div class="line">public class HibernateUtil &#123;</div><div class="line">	private static SessionFactory sessionFactory;</div><div class="line">	static &#123;</div><div class="line">		try &#123;</div><div class="line">			sessionFactory = new Configuration().configure().buildSessionFactory();</div><div class="line">		&#125; catch (Throwable ex) &#123;</div><div class="line">			throw new ExceptionInInitializerError(ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static SessionFactory getSessionFactory() &#123;</div><div class="line">		// Alternatively, you could look up in JNDI here</div><div class="line">		return sessionFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void shutdown() &#123;</div><div class="line">		// Close caches and connection pools</div><div class="line">		getSessionFactory().close();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static Session getSession()</div><div class="line">	&#123;</div><div class="line">		Session session = sessionFactory.openSession();</div><div class="line">		return session;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void beginSession(Session session)</div><div class="line">	&#123;</div><div class="line">		session.getTransaction().begin();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void commitTransaction(Session session)</div><div class="line">	&#123;</div><div class="line">		session.getTransaction().commit();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void rollbackTransaction(Session session)</div><div class="line">	&#123;</div><div class="line">		Transaction tx = session.getTransaction();</div><div class="line">		if (tx.isActive())</div><div class="line">			tx.rollback();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>如 TVersion<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">import javax.persistence.Entity;</div><div class="line">import javax.persistence.GeneratedValue;</div><div class="line">import javax.persistence.GenerationType;</div><div class="line">import javax.persistence.Id;</div><div class="line">import javax.persistence.Table;</div><div class="line"></div><div class="line">@Entity							//表示实体类</div><div class="line">@Table(catalog = &quot;dbcoolweather&quot;) //数据库名</div><div class="line">public class TVersion &#123;</div><div class="line">	</div><div class="line">	private long id;</div><div class="line">	private int version_code;</div><div class="line">	private String version_name;</div><div class="line">	private String description;</div><div class="line">	private String path;</div><div class="line">	</div><div class="line">	//主键，自增</div><div class="line">	@Id</div><div class="line">	@GeneratedValue(strategy=GenerationType.AUTO)</div><div class="line">	public long getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line">	public void setId(long id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line">	public int getVersion_code() &#123;</div><div class="line">		return version_code;</div><div class="line">	&#125;</div><div class="line">	public void setVersion_code(int version_code) &#123;</div><div class="line">		this.version_code = version_code;</div><div class="line">	&#125;</div><div class="line">	public String getVersion_name() &#123;</div><div class="line">		return version_name;</div><div class="line">	&#125;</div><div class="line">	public void setVersion_name(String version_name) &#123;</div><div class="line">		this.version_name = version_name;</div><div class="line">	&#125;</div><div class="line">	public String getDescription() &#123;</div><div class="line">		return description;</div><div class="line">	&#125;</div><div class="line">	public void setDescription(String description) &#123;</div><div class="line">		this.description = description;</div><div class="line">	&#125;</div><div class="line">	public String getPath() &#123;</div><div class="line">		return path;</div><div class="line">	&#125;</div><div class="line">	public void setPath(String path) &#123;</div><div class="line">		this.path = path;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="在Hibernate-cfg-xml中添加映射关系"><a href="#在Hibernate-cfg-xml中添加映射关系" class="headerlink" title="在Hibernate.cfg.xml中添加映射关系"></a>在Hibernate.cfg.xml中添加映射关系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Mappings  --&gt;</div><div class="line">&lt;mapping class=&quot;com.allever.mycoolweather.bean.TVersion&quot;/&gt;</div></pre></td></tr></table></figure>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>首先在MySQL中手动创建数据库： dbcoolweather</p>
<h2 id="运行DDLCreator类"><a href="#运行DDLCreator类" class="headerlink" title="运行DDLCreator类"></a>运行DDLCreator类</h2><p>刷新数据库表，此时，tversion表已经建好了, 有木有很惊讶～～～</p>
<h1 id="对数据库进行增删改查"><a href="#对数据库进行增删改查" class="headerlink" title="对数据库进行增删改查"></a>对数据库进行增删改查</h1><h2 id="创建VersionDAO类"><a href="#创建VersionDAO类" class="headerlink" title="创建VersionDAO类"></a>创建VersionDAO类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.hibernate.Query;</div><div class="line">import org.hibernate.Session;</div><div class="line"></div><div class="line">import com.allever.mycoolweather.bean.TVersion;</div><div class="line">import com.allever.mycoolweather.util.HibernateUtil;</div><div class="line"></div><div class="line"></div><div class="line">public class VersionDAO &#123;</div><div class="line">	</div><div class="line">	Session session = null;</div><div class="line">	boolean commit = false;</div><div class="line"></div><div class="line">	public VersionDAO() &#123;</div><div class="line">		this.session = HibernateUtil.getSession();</div><div class="line">		commit = true;</div><div class="line">		HibernateUtil.beginSession(session);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	public VersionDAO(Session session) &#123;</div><div class="line">		this.session = session;</div><div class="line">		commit = false;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void close() &#123;</div><div class="line">		if (commit == true) &#123;</div><div class="line">			HibernateUtil.commitTransaction(session);</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Session getSession() &#123;</div><div class="line">		return session;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	public TVersion getById(long id) throws Exception &#123;</div><div class="line">		TVersion d = null;</div><div class="line">		try &#123;</div><div class="line">			d = (TVersion) session.get(TVersion.class, id);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			HibernateUtil.rollbackTransaction(session);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line">		return d;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	@SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">	public List&lt;TVersion&gt; getByQuery(String conditions, long start,</div><div class="line">			long limit) throws Exception &#123;</div><div class="line">		List&lt;TVersion&gt; dl = null;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			String hql = &quot;from TVersion&quot;;</div><div class="line">			if ((conditions != null) &amp;&amp; (conditions.length() &gt; 0))</div><div class="line">				hql += &quot; where &quot; + conditions;</div><div class="line"></div><div class="line">			Query query = session.createQuery(hql);</div><div class="line">			if (limit &gt; 0) &#123;</div><div class="line">				query.setFirstResult((int) start);</div><div class="line">				query.setMaxResults((int) limit);</div><div class="line">			&#125;</div><div class="line">			dl = (List&lt;TVersion&gt;) query.list();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			HibernateUtil.rollbackTransaction(session);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		return dl;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">	public List&lt;TVersion&gt; getUpdateVersion(long start,long limit) throws Exception &#123;</div><div class="line">		List&lt;TVersion&gt; dl = null;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			String hql = &quot;from TVersion ORDER BY version_code DESC&quot;;</div><div class="line"></div><div class="line">			Query query = session.createQuery(hql);</div><div class="line">			if (limit &gt; 0) &#123;</div><div class="line">				query.setFirstResult((int) 0);</div><div class="line">				query.setMaxResults((int) 0);</div><div class="line">			&#125;</div><div class="line">			dl = (List&lt;TVersion&gt;) query.list();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			HibernateUtil.rollbackTransaction(session);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		return dl;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public TVersion add(TVersion d) throws Exception &#123;</div><div class="line">		Long id = null;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			id = (Long) session.save(d);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			HibernateUtil.rollbackTransaction(session);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		return getById(id);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void deleteById(long id) throws Exception &#123;</div><div class="line">		TVersion d = null;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			d = (TVersion) session.get(TVersion.class, id);</div><div class="line">			if (d != null)</div><div class="line">				session.delete(d);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			HibernateUtil.rollbackTransaction(session);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public TVersion update(TVersion d) throws Exception &#123;</div><div class="line">		try &#123;</div><div class="line">			session.update(d);</div><div class="line">		&#125;</div><div class="line">		catch(RuntimeException e) &#123;</div><div class="line">			HibernateUtil.rollbackTransaction(session);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		return getById(d.getId());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>各位看函数名就知道要干什么了吧，这里就不哆嗦了</p>
<h2 id="创建VersionTest类进行测试"><a href="#创建VersionTest类进行测试" class="headerlink" title="创建VersionTest类进行测试"></a>创建VersionTest类进行测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class VersionTest &#123;</div><div class="line">	public static void main(String[] args)&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就是一个普通的JAVA类</p>
<h3 id="初始化DAO"><a href="#初始化DAO" class="headerlink" title="初始化DAO"></a>初始化DAO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">VersionDAO dao = new VersionDAO();</div><div class="line">//operation</div><div class="line">dao.close();</div></pre></td></tr></table></figure>
<h3 id="增加一条记录"><a href="#增加一条记录" class="headerlink" title="增加一条记录"></a>增加一条记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">try&#123;</div><div class="line">	TVersion v1 = new TVersion();</div><div class="line">	v1.setVersion_code(5);</div><div class="line">	v1.setDescription(&quot;第3版&quot;);</div><div class="line">	v1.setVersion_name(&quot;1.3&quot;);</div><div class="line">	v1.setPath(&quot;/apk/mycoolweather_1.3.apk&quot;);</div><div class="line">	dao.add(v1);</div><div class="line">&#125;catch(Exception e)&#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;finally&#123;</div><div class="line">	dao.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查询一条记录"><a href="#查询一条记录" class="headerlink" title="查询一条记录"></a>查询一条记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;TVersion&gt; list_tversion = new ArrayList&lt;&gt;();</div><div class="line">list_tversion = dao.getByQuery(&quot;version_code=&quot;+ 5, 0, 0);</div><div class="line">if(list_tversion.size()&gt;0)&#123;</div><div class="line">	TVersion v = list_tversion.get(0);</div><div class="line">	v.getVersion_name();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查询所有记录"><a href="#查询所有记录" class="headerlink" title="查询所有记录"></a>查询所有记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;TVersion&gt; list_tversion = new ArrayList&lt;&gt;();</div><div class="line">// null or &quot;&quot;</div><div class="line">list_tversion = dao.getByQuery(null, 0, 0);</div><div class="line">for(TVersion tversion: list_tversion)&#123;</div><div class="line">	tversion.getVersion_name();</div><div class="line">	System.out.println(tversion.getDescription());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;TVersion&gt; list_tversion = new ArrayList&lt;&gt;();</div><div class="line">list_tversion = dao.getByQuery(&quot;version_code=&quot;+ 5, 0, 0);</div><div class="line">if(list_tversion.size()&gt;0)&#123;</div><div class="line">	TVersion v = list_tversion.get(0);</div><div class="line">	v.setDescription(&quot;new Description&quot;);</div><div class="line">	dao.update(v);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;TVersion&gt; list_tversion = new ArrayList&lt;&gt;();</div><div class="line">list_tversion = dao.getByQuery(&quot;version_code=&quot;+ 5, 0, 0);</div><div class="line">if(list_tversion.size()&gt;0)&#123;</div><div class="line">	TVersion v = list_tversion.get(0);</div><div class="line">	v.setDescription(&quot;new Description&quot;);</div><div class="line">	dao.deleteById(v.getId());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK,大功告成.<br>写这篇复习了以前所学知识，下一步，继续学习新版本的知识</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;下载Hibernate所需jar包&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="JavaWeb" scheme="https://devallever.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="https://devallever.github.io/tags/JavaWeb/"/>
    
      <category term="Hibernate" scheme="https://devallever.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>设计模式(二) 建造者模式</title>
    <link href="https://devallever.github.io/2017/05/18/builder-patterns/"/>
    <id>https://devallever.github.io/2017/05/18/builder-patterns/</id>
    <published>2017-05-18T13:27:59.000Z</published>
    <updated>2017-05-19T10:03:51.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示</p>
</blockquote>
<p>你看懂了吗? 反正我是一脸懵逼</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1495123628735&di=c7dad79192ca076a4d7b2dd4266c3c42&imgtype=0&src=http%3A%2F%2Fimg.my.csdn.net%2Fuploads%2F201302%2F03%2F1359892948_5468.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>解读:  </p>
<ul>
<li>Product产品类: 产品抽象类  </li>
<li>Builder: 抽象Builder类,规划产品组建,一般是由子类实现具体的组建过程</li>
<li>ConcreteBuilder: 具体的Builder类</li>
<li>Director: 统一组建过程</li>
</ul>
<p>好吧, 还是说的有点虚呀, 来一个简单例子</p>
<h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><h2 id="Computer抽象类类：Product角色，即产品抽象类"><a href="#Computer抽象类类：Product角色，即产品抽象类" class="headerlink" title="Computer抽象类类：Product角色，即产品抽象类"></a>Computer抽象类类：Product角色，即产品抽象类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by allever on 17-5-18.</div><div class="line"> * 计算机抽象类: Product角色*/</div><div class="line"></div><div class="line">public abstract class Computer &#123;</div><div class="line"></div><div class="line">    private String strBoard;</div><div class="line">    private String strDisplay;</div><div class="line">    private String strOS;</div><div class="line"></div><div class="line">    protected Computer()&#123;&#125;</div><div class="line">    /**CPU核心数*/</div><div class="line">    public void setBoard(String board)&#123;</div><div class="line">        this.strBoard = board;</div><div class="line">    &#125;</div><div class="line">    public void setDisplay(String display)&#123;</div><div class="line">        this.strDisplay = display;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setStrOS(String os)&#123;</div><div class="line">        this.strOS = os;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        String result = &quot;Computer:\nboard=&quot; + strBoard + &quot;\ndisplay = &quot; + strDisplay + &quot;\nOS = &quot; + strOS;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MacBook类，具体Computer类"><a href="#MacBook类，具体Computer类" class="headerlink" title="MacBook类，具体Computer类"></a>MacBook类，具体Computer类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by allever on 17-5-18.</div><div class="line"> */</div><div class="line"></div><div class="line">public class MacBook extends Computer &#123;</div><div class="line">    protected MacBook()&#123;&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##Builder抽象类<br>负责规范产品组建，一般是由子类实现具体的组建过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by allever on 17-5-18.</div><div class="line"> * 抽象Builder类*/</div><div class="line"></div><div class="line">public abstract class Builder &#123;</div><div class="line">    public abstract void buildBoard(String board);</div><div class="line">    public abstract void buildDisplay(String display);</div><div class="line">    public abstract void buildOS(String os);</div><div class="line">    public abstract Computer build();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="MacBookBuilder：具体Builder类，ConcreteBuilder角色"><a href="#MacBookBuilder：具体Builder类，ConcreteBuilder角色" class="headerlink" title="MacBookBuilder：具体Builder类，ConcreteBuilder角色"></a>MacBookBuilder：具体Builder类，ConcreteBuilder角色</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by allever on 17-5-18.</div><div class="line"> * Builder实现类*/</div><div class="line"></div><div class="line">public class MacBookBuilder extends Builder &#123;</div><div class="line"></div><div class="line">    private Computer computerMacBook = new MacBook();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void buildBoard(String board) &#123;</div><div class="line">        computerMacBook.setBoard(board);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void buildDisplay(String display) &#123;</div><div class="line">        computerMacBook.setDisplay(display);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void buildOS(String os) &#123;</div><div class="line">        computerMacBook.setStrOS(os);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Computer build() &#123;</div><div class="line">        return computerMacBook;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Director类：同一组装过程"><a href="#Director类：同一组装过程" class="headerlink" title="Director类：同一组装过程"></a>Director类：同一组装过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by allever on 17-5-18.</div><div class="line"> * Director类： 负责构建Computer*/</div><div class="line"></div><div class="line">public class Director &#123;</div><div class="line">    private Builder builder = null;</div><div class="line">    public Director(Builder builder)&#123;</div><div class="line">        this.builder = builder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //构建对象</div><div class="line">    public void construct(String board, String display, String os)&#123;</div><div class="line">        builder.buildBoard(board);</div><div class="line">        builder.buildDisplay(display);</div><div class="line">        builder.buildOS(os);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Builder builder = new MacBookBuilder();</div><div class="line">Director director = new Director(builder);</div><div class="line">director.construct(&quot;英特尔酷睿i7&quot;,&quot;15.6寸&quot;,&quot;Ubuntu 16.04&quot;);</div><div class="line">Log.d(TAG, builder.build().toString());</div><div class="line">Toast.makeText(BuildPatternsActivity.this,builder.build().toString(),Toast.LENGTH_LONG).show();</div></pre></td></tr></table></figure>
<h1 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h1><p>通常,Director角色会被省略,直接使用Builder构建对象,这个Builder通常为链式调用,即buildXXX()方法返回自身,return this;</p>
<h2 id="修改后的Builder类"><a href="#修改后的Builder类" class="headerlink" title="修改后的Builder类"></a>修改后的Builder类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by allever on 17-5-18.</div><div class="line"> * 抽象Builder类*/</div><div class="line"></div><div class="line">public abstract class Builder &#123;</div><div class="line">    public abstract Builder buildBoard(String board);</div><div class="line">    public abstract Builder buildDisplay(String display);</div><div class="line">    public abstract Builder buildOS(String os);</div><div class="line">    public abstract Computer build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MacBookBuilder"><a href="#MacBookBuilder" class="headerlink" title="MacBookBuilder:"></a>MacBookBuilder:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by allever on 17-5-18.</div><div class="line"> * Builder实现类*/</div><div class="line"></div><div class="line">public class MacBookBuilder extends Builder &#123;</div><div class="line"></div><div class="line">    private Computer computerMacBook = new MacBook();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public MacBookBuilder buildBoard(String board) &#123;</div><div class="line">        computerMacBook.setBoard(board);</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public MacBookBuilder buildDisplay(String display) &#123;</div><div class="line">        computerMacBook.setDisplay(display);</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public MacBookBuilder buildOS(String os) &#123;</div><div class="line">        computerMacBook.setStrOS(os);</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Computer build() &#123;</div><div class="line">        return computerMacBook;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在客户端中的调用"><a href="#在客户端中的调用" class="headerlink" title="在客户端中的调用"></a>在客户端中的调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Builder builder = new MacBookBuilder();</div><div class="line">//Director director = new Director(builder);</div><div class="line">//director.construct(&quot;英特尔酷睿i7&quot;,&quot;15.6寸&quot;,&quot;Ubuntu 16.04&quot;);</div><div class="line">Log.d(TAG, builder.buildBoard(&quot;英特尔酷睿i7&quot;)</div><div class="line">                    .buildDisplay(&quot;15.6寸&quot;)</div><div class="line">                    .buildOS(&quot;Max OS&quot;)</div><div class="line">                    build().toString());</div></pre></td></tr></table></figure>
<p>现在你是不是感觉到很熟悉的呢? 就像Android中构建一个Notification对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Notification notification = new NotificationCompat.Builder(this)</div><div class="line">        .setContentTitle(&quot;This is content title&quot;)</div><div class="line">        .setContentText(&quot;This is content text&quot;)</div><div class="line">        .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">        .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher))</div><div class="line">        .setWhen(System.currentTimeMillis())</div><div class="line">        //设置点击行为</div><div class="line">        .setContentIntent(pendingIntent)</div><div class="line">        //点击后消失</div><div class="line">        .setAutoCancel(true)</div><div class="line">        //设置声音</div><div class="line">        .setSound(Uri.fromFile(new File(&quot;/system/media/audio/ringtones/Luna.ogg&quot;)))</div><div class="line">        //设置震动 震动1s 静止1s 震动1s 要申明权限</div><div class="line">        .setVibrate(new long[]&#123;0, 1000,1000,1000&#125;)</div><div class="line">        //设置呼吸灯闪烁</div><div class="line">        .setLights(Color.GREEN, 1000, 1000)</div><div class="line">        //设置默认</div><div class="line">        .setDefaults(NotificationCompat.DEFAULT_ALL)</div><div class="line">        //设置长文本</div><div class="line">        .setStyle(new NotificationCompat.BigTextStyle().bigText(&quot;An Activity is an application component that provides a screen with which users can interact in order to do something, such as dial the phone, take a photo, send an email, or view a map.&quot;))</div><div class="line">        //设置展开大图,,设置了长文本会看不到</div><div class="line">        .setStyle(new NotificationCompat.BigPictureStyle().bigPicture(BitmapFactory.decodeResource(getResources(),R.mipmap.expensive)))</div><div class="line">        //设置通知重要程度</div><div class="line">        .setPriority(NotificationCompat.PRIORITY_MAX)</div><div class="line">        .build();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p
    
    </summary>
    
      <category term="设计模式" scheme="https://devallever.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://devallever.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="建造者模式" scheme="https://devallever.github.io/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu server 下配置JDK，Tomcat，MySQL</title>
    <link href="https://devallever.github.io/2017/05/16/build-java-tomcat-mysql/"/>
    <id>https://devallever.github.io/2017/05/16/build-java-tomcat-mysql/</id>
    <published>2017-05-16T07:56:38.000Z</published>
    <updated>2017-05-16T08:31:16.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置JDK环境"><a href="#配置JDK环境" class="headerlink" title="配置JDK环境"></a>配置JDK环境</h1><blockquote>
<p>参考：<a href="http://blog.csdn.net/yebhweb/article/details/55098189" target="_blank" rel="external">http://blog.csdn.net/yebhweb/article/details/55098189</a></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载好jdk包，如：jdk-8u121-linux-x64.tar.gz<br>为了同一管理安装目录统一为：/opt/<br>复制压缩包到 /opt/jdk目录下<br>进入到 /opt/jdk<br>解压：tar -xvf jdk-8u121-linux-x64.tar.gz<br>删除压缩包</p>
<h2 id="配置jdk环境"><a href="#配置jdk环境" class="headerlink" title="配置jdk环境"></a>配置jdk环境</h2><p>修改文件进行全局配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gedit/.bashrc</div></pre></td></tr></table></figure></p>
<p>在最后加入如下内容<br>打开之后在末尾添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/jdk/jdk1.8.0_121  </div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>请记住，在上述添加过程中，等号两侧不要加入空格，不然会出现“不是有效的标识符”，因为source /etc/profile 时不能识别多余到空格，会理解为是路径一部分。<br>然后保存。</p>
<p>使配置文件生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure></p>
<p>检验是否安装成功<br>在终端输入如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure></p>
<h1 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h1><p>下载压缩包，如：apache-tomcat-8.5.11.tar.gz<br>复制到：/opt/tomcat<br>进入到目录：/opt/tomcat<br>解压：<br>tar -xvf apache-tomcat-8.5.11.tar.gz<br>删除压缩包<br>进入到tomcat安装目录下的bin目录<br>执行：startup.sh就可以启动Tomcat</p>
<p>#安装MySQL<br>命令安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install mysql-server-5.7</div></pre></td></tr></table></figure></p>
<p>按提示即可安装完成，并且自动启动MySQL<br>使用root登录mysql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure></p>
<p>退出：ctrl+z</p>
<h2 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h2><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</div></pre></td></tr></table></figure></p>
<p>在[mysqld]中加入如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">character-set-server = utf8</div></pre></td></tr></table></figure></p>
<p>重启MySQL：systomctl restart mysql.service<br>启动MySQL：systemctl start mysql.service<br>查看mysql编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show variables like &apos;character%&apos;;</div></pre></td></tr></table></figure></p>
<p>显示已经改为utf8</p>
<h2 id="创建数据库设置字符集"><a href="#创建数据库设置字符集" class="headerlink" title="创建数据库设置字符集"></a>创建数据库设置字符集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database dbname default charset utf8 COLLATE utf8_general_ci;</div></pre></td></tr></table></figure>
<p>导入sql文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source path/filename.sql;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;配置JDK环境&quot;&gt;&lt;a href=&quot;#配置JDK环境&quot; class=&quot;headerlink&quot; title=&quot;配置JDK环境&quot;&gt;&lt;/a&gt;配置JDK环境&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://blog.csdn.net/yebh
    
    </summary>
    
      <category term="Ubuntu" scheme="https://devallever.github.io/categories/Ubuntu/"/>
    
    
      <category term="Java" scheme="https://devallever.github.io/tags/Java/"/>
    
      <category term="Tomcat" scheme="https://devallever.github.io/tags/Tomcat/"/>
    
      <category term="MySQL" scheme="https://devallever.github.io/tags/MySQL/"/>
    
      <category term="Ubuntu" scheme="https://devallever.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://devallever.github.io/2017/05/15/ScrollMethods/"/>
    <id>https://devallever.github.io/2017/05/15/ScrollMethods/</id>
    <published>2017-05-15T09:07:15.891Z</published>
    <updated>2017-05-15T09:07:15.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滑动的方式"><a href="#滑动的方式" class="headerlink" title="滑动的方式"></a>滑动的方式</h1><h2 id="layout"><a href="#layout" class="headerlink" title="layout()"></a>layout()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        //getX()是获取View的坐标</div><div class="line">        //获取触摸点的坐标</div><div class="line">        float x = event.getX();</div><div class="line">        float y = event.getY();</div><div class="line">        Log.d(TAG, &quot;onTouchEvent: x = &quot; + x);</div><div class="line">        int action = event.getAction();</div><div class="line">        switch (action)&#123;</div><div class="line">            case MotionEvent.ACTION_DOWN:</div><div class="line">                lastX = x;</div><div class="line">                lastY = y;</div><div class="line">                break;</div><div class="line">            case MotionEvent.ACTION_MOVE:</div><div class="line">                float movedX = x - lastX;</div><div class="line">                float movedY = y - lastY;</div><div class="line">                Log.d(TAG, &quot;onTouchEvent: lastX = &quot; + lastX);</div><div class="line">                Log.d(TAG, &quot;onTouchEvent: movedX = &quot; + movedX);</div><div class="line">                layout((int)(getLeft()+movedX),(int)(getTop()+movedY),(int)(getRight()+movedX),(int)(getBottom()+movedY));</div><div class="line">                break;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Params方式"><a href="#Params方式" class="headerlink" title="Params方式"></a>Params方式</h2><p>###使用Layout的LayoutParams方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)getLayoutParams();</div><div class="line">layoutParams.leftMargin = (int)(getLeft()+movedX);</div><div class="line">layoutParams.topMargin = (int)(getTop()+movedY);</div><div class="line">setLayoutParams(layoutParams);</div></pre></td></tr></table></figure></p>
<h3 id="使用MarginLayoutParams的方式"><a href="#使用MarginLayoutParams的方式" class="headerlink" title="使用MarginLayoutParams的方式"></a>使用MarginLayoutParams的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ViewGroup.MarginLayoutParams marginLayoutParams = (ViewGroup.MarginLayoutParams)getLayoutParams();</div><div class="line">marginLayoutParams.leftMargin = (int)(getLeft()+movedX);</div><div class="line">marginLayoutParams.topMargin = (int)(getTop()+movedY);</div><div class="line">setLayoutParams(marginLayoutParams);</div></pre></td></tr></table></figure>
<h2 id="使用ScrollBy方式"><a href="#使用ScrollBy方式" class="headerlink" title="使用ScrollBy方式"></a>使用ScrollBy方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//ScrollBy方式移动的是View里面的内容，如果要移动View则在它的父布局使用scrollBy</div><div class="line">((View)getParent()).scrollBy(-(int)movedX,-(int)movedY);</div></pre></td></tr></table></figure>
<h2 id="使用Scroller平滑移动"><a href="#使用Scroller平滑移动" class="headerlink" title="使用Scroller平滑移动"></a>使用Scroller平滑移动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">case MotionEvent.ACTION_UP:</div><div class="line">	//使用Scroller平滑移动,手指离开屏幕是View返回原位</div><div class="line">	int scrollX = ((View)getParent()).getScrollX();</div><div class="line">	int scrollY = ((View)getParent()).getScrollY();</div><div class="line">	scroller.startScroll(</div><div class="line">		scrollX,</div><div class="line">		scrollY,</div><div class="line">		-scrollX,</div><div class="line">		-scrollY</div><div class="line">	);</div><div class="line">	invalidate();</div><div class="line">	break;</div></pre></td></tr></table></figure>
<p>重写computeScroll()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void computeScroll() &#123;</div><div class="line">    super.computeScroll();</div><div class="line">    if (scroller.computeScrollOffset())&#123;</div><div class="line">        ((View)getParent()).scrollTo(</div><div class="line">                scroller.getCurrX(),</div><div class="line">                scroller.getCurrY()</div><div class="line">        );</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;滑动的方式&quot;&gt;&lt;a href=&quot;#滑动的方式&quot; class=&quot;headerlink&quot; title=&quot;滑动的方式&quot;&gt;&lt;/a&gt;滑动的方式&lt;/h1&gt;&lt;h2 id=&quot;layout&quot;&gt;&lt;a href=&quot;#layout&quot; class=&quot;headerlink&quot; title=&quot;l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式(一) 单例模式</title>
    <link href="https://devallever.github.io/2017/05/12/singleton/"/>
    <id>https://devallever.github.io/2017/05/12/singleton/</id>
    <published>2017-05-12T01:40:29.000Z</published>
    <updated>2017-05-18T13:32:36.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>确保每个类只存在一个实例，而且自行实例化并向整个系统提供这个实例  </p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>访问IO，数据库，网络等需要消耗多资源的对象</p>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><p>这家伙太饥饿难耐啦，什么也不干，也不想想在多线程时候怎么保证单例对象的唯一性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton hungrySingleton = <span class="keyword">new</span> HungrySingleton();</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> hungrySingleton;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**防止反序列化重新构建对象*/</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</div><div class="line">        <span class="keyword">return</span> hungrySingleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><p>这家伙懂事点点，考虑到多线程时候怎么保证单例对象的唯一性。就加个synchronized关键字嘛，每次调用该方法都进行同步，但是反应还是有点迟钝。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class LazySingleton &#123;</div><div class="line">    private static LazySingleton lazySingleton = null;</div><div class="line">    private LazySingleton()&#123;&#125;</div><div class="line"></div><div class="line">    /**偷懒！ 只判断一次，造成每次调用该方法都进行同步*/</div><div class="line">    public static synchronized LazySingleton getInstance()&#123;</div><div class="line">        if (lazySingleton == null)&#123;</div><div class="line">            lazySingleton = new LazySingleton();</div><div class="line">        &#125;</div><div class="line">        return lazySingleton;</div><div class="line">    &#125;</div><div class="line">    /**防止反序列化重新构建对象*/</div><div class="line">    private Object readResolve() throws ObjectStreamException &#123;</div><div class="line">        return lazySingleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="双重检查锁定"><a href="#双重检查锁定" class="headerlink" title="双重检查锁定"></a>双重检查锁定</h2><p>还是这家伙还是挺老实的，干活不怕苦不怕累，使用了两次判空操作，第一次判空防止不必要的同步，第二次判空保证在null情况下才创建实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DCLSingleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DCLSingleton dclSingleton = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DCLSingleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DCLSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (dclSingleton == <span class="keyword">null</span>)&#123;  <span class="comment">//避免不必要的同步</span></div><div class="line">            <span class="keyword">synchronized</span> (DCLSingleton.class)&#123;</div><div class="line">                <span class="keyword">if</span> (dclSingleton == <span class="keyword">null</span>)&#123;</div><div class="line">                    dclSingleton = <span class="keyword">new</span> DCLSingleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dclSingleton;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**防止反序列化重新构建对象*/</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</div><div class="line">        <span class="keyword">return</span> dclSingleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>这家伙比较靠谱了，既保证线程安全，也保证单例唯一性，又延迟了单例的实例化，mua<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class StaticInnerSingleton &#123;</div><div class="line">    private StaticInnerSingleton()&#123;&#125;</div><div class="line">    public static StaticInnerSingleton getInstance()&#123;</div><div class="line">        return StaticInnerSingleHolder.staticInnerSingleton;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static class StaticInnerSingleHolder&#123;</div><div class="line">        private static final StaticInnerSingleton staticInnerSingleton = new StaticInnerSingleton();</div><div class="line">    &#125;</div><div class="line">    /**防止反序列化重新构建对象*/</div><div class="line">    private Object readResolve() throws ObjectStreamException &#123;</div><div class="line">        return StaticInnerSingleHolder.staticInnerSingleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>以上实现方式，在反序列化时候会重新创建对象，所以必须加入以下方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/**防止反序列化重新构建对象*/</div><div class="line">private Object readResolve() throws ObjectStreamException &#123;</div><div class="line">        return StaticInnerSingleHolder.staticInnerSingleton;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>待更新…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;确保每个类只存在一个实例，而且自行实例化并向整个系统提供这个实例  &lt;/p&gt;
&lt;h1 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; c
    
    </summary>
    
      <category term="设计模式" scheme="https://devallever.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://devallever.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="https://devallever.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之六大原则</title>
    <link href="https://devallever.github.io/2017/05/11/the-six-principle/"/>
    <id>https://devallever.github.io/2017/05/11/the-six-principle/</id>
    <published>2017-05-11T00:50:16.000Z</published>
    <updated>2017-05-11T04:20:58.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单一职责原则SRP-Single-Responsibility-Principle"><a href="#单一职责原则SRP-Single-Responsibility-Principle" class="headerlink" title="单一职责原则SRP(Single Responsibility Principle)"></a>单一职责原则SRP(Single Responsibility Principle)</h1><p>定义: 就一个类而言，应该仅有一个引起它变化的原因。  </p>
<p>简单地说：  </p>
<ul>
<li>一个类中应该是一组相关性很高的函数，数据的封装。这满足高内聚的要求</li>
<li>两个完全不一样的功能就不应该放在同一个类中。</li>
<li></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单一职责原则SRP-Single-Responsibility-Principle&quot;&gt;&lt;a href=&quot;#单一职责原则SRP-Single-Responsibility-Principle&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则SRP(
    
    </summary>
    
      <category term="设计模式" scheme="https://devallever.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://devallever.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="六大原则" scheme="https://devallever.github.io/tags/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Java 内部类</title>
    <link href="https://devallever.github.io/2017/05/05/innerclass/"/>
    <id>https://devallever.github.io/2017/05/05/innerclass/</id>
    <published>2017-05-05T02:26:16.000Z</published>
    <updated>2017-05-05T03:20:52.545Z</updated>
    
    <content type="html"><![CDATA[<p>内部类是指在一个外部类的内部再定义一个类。内部类作为外部类的一个成员，并且依附于外部类而存在的。内部类可为静态，可用protected和private修饰（而外部类只能使用public和缺省的包访问权限）。内部类主要有以下几类：成员内部类、局部内部类、静态内部类、匿名内部类</p>
<p>为什么需要内部类？<br>典型的情况是，内部类继承自某个类或实现某个接口，内部类的代码操作创建其的外围类的对象。所以你可以认为内部类提供了某种进入其外围类的窗口。使用内部类最吸引人的原因是：<br>每 个内部类都能独立地继承自一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。如果没有内部类提供的可以继承多 个具体的或抽象的类的能力，一些设计与编程问题就很难解决。从这个角度看，内部类使得多重继承的解决方案变得完整。接口解决了部分问题，而内部类有效地实 现了“多重继承”。</p>
<h1 id="静态内部类型-static-nested-type"><a href="#静态内部类型-static-nested-type" class="headerlink" title="静态内部类型(static nested type)"></a>静态内部类型(static nested type)</h1><p>静态内部类型可以是class,interface,或者enum。而其他类型的内部类型只能是class。</p>
<p>静态内部类其实还是一个顶层类（源代码文件级别的类），他不依赖外部类,只不过它被封装在另一个class或者interface中，而不是直接定义在文件级别中。因此，它和一般的类静态成员很类似:</p>
<p>1、它不包含外部类当前对象引用this,因此不能直接访问外部类的实际成员,但可以使用外部类的static成员。</p>
<p>2、静态内部类作为一个静态成员,因此可以用访问权限修饰符:public . private …….等。用的最多一般是private</p>
<pre><code>引用静态内部类：  Wapper.Inner
</code></pre><p>3、不能在非静态内部类中再定义静态内部类。静态内部类可以无限深度的嵌套下去。</p>
<p>提升</p>
<p>内部类最终会被javac编译为独立的类，JVM看见的都是top-level类。</p>
<p>编译后的class文件形如：WrapperClass $ InnerStaticClass.class</p>
<p>下面是使用静态内部类简单实现链式栈数据结构的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">class LinkedSatck&lt;E&gt; &#123;</div><div class="line">    private static class Node&lt;T&gt; &#123;</div><div class="line"></div><div class="line">        public Node(Node&lt;T&gt; next, T data) &#123;</div><div class="line">            this.next = next;</div><div class="line">            this.data = data;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @SuppressWarnings(&quot;unused&quot;)</div><div class="line">        public Node() &#123;</div><div class="line">            this(null, null);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private Node&lt;T&gt; next;</div><div class="line">        private T data;</div><div class="line"></div><div class="line">        public T getData() &#123;</div><div class="line">            return data;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Node&lt;T&gt; getNext() &#123;</div><div class="line">            return next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean isEndNode() &#123;</div><div class="line">            return (next == null);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;   </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    public LinkedSatck() &#123;</div><div class="line">        topNode = new Node&lt;E&gt;(null, null);</div><div class="line"></div><div class="line">        // size =0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int size = 0;</div><div class="line">    private Node&lt;E&gt; topNode = null;</div><div class="line"></div><div class="line">    public void push(E e) &#123;</div><div class="line"></div><div class="line">        Node&lt;E&gt; newTopNode = new Node&lt;E&gt;(topNode, e);</div><div class="line">        ++size;</div><div class="line">        topNode = newTopNode;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public E pop() &#123;</div><div class="line">        if (topNode.isEndNode())</div><div class="line">            return null;</div><div class="line">        else &#123;</div><div class="line">            E re = topNode.getData();</div><div class="line"></div><div class="line">            topNode = topNode.getNext();</div><div class="line"></div><div class="line">            --size;</div><div class="line">            return re;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int size() &#123;</div><div class="line">        return size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean isEmpty() &#123;</div><div class="line">        return size == 0;</div><div class="line">        // return topNode.isEnd();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="成员内部类-inner-member-class"><a href="#成员内部类-inner-member-class" class="headerlink" title="成员内部类(inner member class)"></a>成员内部类(inner member class)</h1><p>成员内部类最重要的特点就是它可以直接使用外部类的实例成员和static成员，即便是使用private修饰也是如此。 </p>
<p>因为成员内部类总包含了一个外部类的当前对象引用 ，奇怪的名字 this$0，这个引用在成员内部类实例化时被外部类的当前对象引用this初始化。</p>
<p>大致实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Outter</div><div class="line">&#123;</div><div class="line">    private class Inner</div><div class="line">    &#123;</div><div class="line">        private final Outter this$0;  //javac自动添加</div><div class="line">        Inner(Outter o)         //javac自动添加</div><div class="line">        &#123;</div><div class="line">            this.this$0 = o;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //使用成员内部类对象时发生：new Inner(Outter.this)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 这也是为什么在创建一个成员内部类对象时,要先创建一个外部类对象的原因了。</p>
<p>和普通实例成员一样，成员内部里是属于外部类的对象的，那么，在成员内部类就理所当然可以直接使用外部类的其他实例成员以及static成员。</p>
<p>因为是实例成员，所以可以使用访问修饰符:public 、protected、private、和默认的包访问权限。</p>
<p>因为是实例成员，因此，在类的外部使用内部类时，必须先创建1个外部类对象，在实际开发中很少使用这个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Outter</div><div class="line">&#123;</div><div class="line">    public class Inner</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Test </div><div class="line">&#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        Outter out = new  Outter();</div><div class="line">        Outter.Inner in = out.new Inner();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个例子，自定义一个Str类，来支持迭代。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">class Str implements Iterable&lt;Character&gt;</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    private String innerStr;</div><div class="line"></div><div class="line">    public Str(String s)</div><div class="line">    &#123;</div><div class="line">        this.innerStr = (s==null?&quot;&quot;:s);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    private class StrIterator implements Iterator&lt;Character&gt;    //迭代器类 作为成员内部类</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        private int curIndex = 0;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean hasNext() &#123;</div><div class="line">            </div><div class="line">            return curIndex &lt; innerStr.length();    //直接访问外部类的成员 innerStr</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public Character next() &#123;</div><div class="line">            </div><div class="line">            return innerStr.charAt(curIndex++);   //直接访问外部类的成员 innerStr</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void remove() &#123;</div><div class="line">            throw new UnsupportedOperationException();</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public Iterator&lt;Character&gt; iterator() &#123;</div><div class="line">        </div><div class="line">        return new StrIterator();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>成员内部类中不能有static成员，即不能有static方法 和 static字段（除非static字段修饰为static final，那样的话它只不过是一个符号常量罢了）。因为java中类的静态成员必须定义在一个top-level顶层类中，而成员内部类（包括后面的方法内部类，匿名内部类）不是top-level顶层类。</p>
<p>static成员需要定义在top-level类中，而成员内部类不是top-level类。</p>
<p>提升</p>
<p>JVM是不理解nested类型的，也就是在它看来，所有的类型都是top-level的， </p>
<p>在每一个成员内部类中，javac都会自动添加一个字段：this$0，用来引用外部类当前对象。同时， 内部类的构造函数会自动为这个字段添加一个参数，当构造内部类对象时，</p>
<p>外部类当前对象就会传递给this$0，让这个字段引用外部类当前实例对象。</p>
<p>从这点我们也会发现，为什么要实例化一个成员内部类前，需要先实例化一个外部类对象。因为成员内部包含了一个外部类对象。</p>
<p>编译后的class文件形如：WrapperClass $ InnerClass.class</p>
<h1 id="局部内部类-local-inner-class"><a href="#局部内部类-local-inner-class" class="headerlink" title="局部内部类(local inner class)"></a>局部内部类(local inner class)</h1><p>定义在一个方法（包括了类的构造块和static构造块）内部的类，叫局部内部类。它不能有任何访问权限修饰符，因为它只能被包装它的方法使用，离开方法后就不可用了。</p>
<p>局部内部类可以和成员内部类一样，访问外部类的实例成员。同时，它还能直接使用包含它的方法的局部final常量,final参数。javac会复制使用了的外部方法的局部final量保存在局部内部类中作为私有的备份。</p>
<p>因此,当这个外部方法执行完毕后，虽然方法中的局部变量的 lifetime结束了，但是如果局部类的实例作为返回值,它会带着外部方法的局部final量离开这个局部作用域,也就是说,局部变量的生命延长到了和局部内部类的对象的生命周期一致。并不会随着方法执行完立刻被清理掉。我们可以以此来形成闭包。</p>
<p>同样,局部内部类不是top-level类，不能有static成员，除非是static final 字段。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class Main</div><div class="line">&#123;</div><div class="line">    public static void main(String[] args) </div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        MsgGenerator g5 = fac(5);</div><div class="line">        System.out.println(g5.generatorMsg());</div><div class="line">        </div><div class="line">        MsgGenerator g2 = fac(2);</div><div class="line">        System.out.println(g2.generatorMsg());</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    public static MsgGenerator fac(final int times)</div><div class="line">    &#123;</div><div class="line">        class Generator implements MsgGenerator</div><div class="line">        &#123;</div><div class="line">            @Override</div><div class="line">            public StringBuffer generatorMsg()</div><div class="line">            &#123;</div><div class="line">                </div><div class="line">                StringBuffer s=  new StringBuffer() ;</div><div class="line">                </div><div class="line">                for(int i=0;i&lt;times;++i)</div><div class="line">                &#123;</div><div class="line">                    s.append(&quot;hello  &quot;);</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                return s;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            </div><div class="line">        &#125;  //end of class</div><div class="line">        </div><div class="line">        </div><div class="line">        return new Generator();    //向外发出闭包</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">interface MsgGenerator</div><div class="line">&#123;</div><div class="line">    StringBuffer generatorMsg();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提升：</p>
<p>局部内部类之所以能访问外部类的实例成员，其原因和成员内部类是一样的：内部类中有保存了外部类对象的引用。除此之外，局部内部类还能访问包装方法的final字段，javac会将内部类使用了的final 局部常量拷贝到局部内部类中保存，并在局部内部类对象实例化时，初始化这些final常量。因此，局部内部类使用的final常量是自己的拷贝分。</p>
<p>局部内部类的实现原理（模拟）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">class Wapper</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    public void wapperFunction()       //在方法中定义一个局部类</div><div class="line">    &#123;</div><div class="line">        final int x = 10;</div><div class="line">        </div><div class="line">        class Local       //局部类</div><div class="line">        &#123;</div><div class="line">            </div><div class="line">            private final int local_copy_x;   //假如在局部类中使用了局部常量x，则javac自动生成</div><div class="line">            </div><div class="line">            private final Wapper this$0;            //javac自动生成的字段，用于保存外部类当前对象引用</div><div class="line">            </div><div class="line">            </div><div class="line">            //首先，局部内部类必定会包含外部类对象，着就是javac插入的第一个构造参数，这是必定的。</div><div class="line">            //其次，如果我们在局部内部类中使用了包装方法foo中的局部final常量，如x，则会在局部类中</div><div class="line">            //自动添加隐藏字段local_copy_x，并在构造器中初始化它。</div><div class="line">            Local(Wapper w,final int x)</div><div class="line">            &#123;</div><div class="line">                this$0 = w;</div><div class="line">                local_copy_x = x;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line"></div><div class="line">        &#125;//end of Local</div><div class="line">        </div><div class="line">       </div><div class="line">　　　   </div><div class="line">　　　　 new Local();     //当实例化局部内部类对象时，等价于 new Local(Wapper.this,x)</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，之所以能在局部内部类中访问外部类的实例，是因为javac自动添加并用外部类当前对象this初始化了局部内部类的字段this$0，这样this$0就引用了外部类当前对象。</p>
<p>局部内部类能使用包装 方法的final字段，也是因为javac自动在局部内部类中添加并初始化的结果。</p>
<h1 id="匿名内部类-inner-anonymous-class"><a href="#匿名内部类-inner-anonymous-class" class="headerlink" title="匿名内部类 (inner anonymous class)"></a>匿名内部类 (inner anonymous class)</h1><p>匿名内部类是特殊的局部内部类,它没有类名。它的访问特性和局部内类一样。如果只会使用类的一个对象,则可以使用匿名内部类,没有名称避免了再引入一个类名称， 匿名内部类是没有名称的局部内部类，访问特性与局部内部类一样。</p>
<p>因为没有类名,因此只能使用父类名或者接口名来创建对象。</p>
<p>new + superClass  或者 new+interface  。创建对象 是 使用new表达式。</p>
<p>new 表达式:匿名类对象的创建方式是使用new表达式,创建对象的同时也是类结构的编写。表达式的值是一个匿名类对象的引用。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new  SuperClass(param1，param2)&#123;   类体    &#125;</div></pre></td></tr></table></figure>
<p> 一般来说,匿名类没有构造参数,如果有,则传递给他的父类的构造函数。</p>
<p>匿名内部类由于没有类名，所以你不能定义新的构造函数，只能有默认的构造函数（javac添加的）。补救的做法是使用构造块。</p>
<p>下面是使用swing 中的Timer定时触发回调函数的例子，使用匿名类创建 ActionListener对象。程序每经过1000ms，就会调用 ActionListener对象的actionPerformed方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line"></div><div class="line"></div><div class="line">        //javax.swing.Timer;</div><div class="line">        Timer t = new Timer(1000, </div><div class="line">                            new ActionListener() &#123;</div><div class="line">                        @Override</div><div class="line">                        public void actionPerformed(ActionEvent e) </div><div class="line">                        &#123;</div><div class="line">                            Toolkit.getDefaultToolkit().beep();  //系统响铃声    </div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">            );</div><div class="line">        </div><div class="line">        t.start();</div><div class="line">        </div><div class="line">        while(true)</div><div class="line">        &#123;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="内部类的工作原理"><a href="#内部类的工作原理" class="headerlink" title="内部类的工作原理"></a>内部类的工作原理</h1><p>内部类只是Java的语法糖，jvm是不理解内部类的，它所看见的都是top-level顶层类。将内部类分离为单独的顶层类，是javac 的任务。内部类被javac合成为单独的类，并形成独立的class文件，这个文件有独特的名称，形式如下：</p>
<p>static内部类:  OutterClass$InnerClass.class</p>
<p>成员内部类：OutterClass$InnerClass.class</p>
<p>局部内部类:  OutterClass$XInnerClass.class           # X为一个正整数</p>
<p>局部内部类:  OutterClass$X.class                          # X为一个正整数</p>
<p>对于static内部类，无需多解释，因为 static内部类和外部类是无依赖关系的，static内部类不包含外部类引用，javac只是将他们简单的分离。</p>
<p>成员内部类为什么能访问外部类的成员？因为内部类会被javac自动插入一个字段this&amp;0去保存外部类当前对象this的引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class OutterClass</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    private int outFiled = 100;</div><div class="line">    </div><div class="line">    public class InnerClass</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        public void f()</div><div class="line">        &#123;</div><div class="line">            int i = outFiled;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>javap反编译后的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Compiled from &quot;OutterClass.java&quot;</div><div class="line">public class OutterClass$InnerClass &#123;</div><div class="line">  final OutterClass this$0;      //由javac自动合成：内部类包含1个外部类的当前对象的引用this&amp;0，使用this&amp;0避免和this冲突    </div><div class="line">    </div><div class="line">  //javac自动合成：合成的构造函数，有1个外部类参数，用于初始化 this&amp;0，this&amp;0被赋值为OutterClass.this</div><div class="line">  public OutterClass$InnerClass(OutterClass);</div><div class="line">    Code:</div><div class="line">       0: aload_0       </div><div class="line">       1: aload_1       </div><div class="line">       2: putfield      #1                  // Field this$0:LOutterClass;</div><div class="line">       5: aload_0       </div><div class="line">       6: invokespecial #2                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</div><div class="line">       9: return        </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  public void f();</div><div class="line">    Code:</div><div class="line">       0: aload_0       </div><div class="line">       1: getfield      #1                  // Field this$0:LOutterClass;</div><div class="line">       4: invokestatic  #3                  // Method OutterClass.access$000:(LOutterClass;)I</div><div class="line">       7: istore_1      </div><div class="line">       8: return        </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>局部内部类和匿名内部类除了可以访问外部类的成员（原因和成员内部类是相同的），还可以访问外部方法的局部final量和final参数。原因如下：</p>
<blockquote>
<p>A local class can use local variables because javac automatically gives the class a<br>private instance field to hold a copy of each local variable the class uses.<br>The compiler also adds hidden parameters to each local class constructor to initial‐<br>ize these automatically created private fields. A local class does not actually access<br>local variables but merely its own private copies of them. This could cause inconsis‐<br>tencies if the local variables could alter outside of the local class.</p>
</blockquote>
<pre><code>-- 《Java int a Nutshell》
</code></pre><p>因为javac会自动在（局部和匿名）内部类中插入私有 的实例字段来保存 使用了的外部方法的final量的拷贝。javac还会在（局部和匿名）内部类中的构造函数的添加参数来初始化插入的私有 的字段。所以，（局部和匿名）内部类使用的实质是自己获得的拷贝量，而不是直接使用外部方法的final量。如果外部方法的量不修饰为final的话，那么意味着它的值可以改变，这就可能会导致（局部和匿名）内部类中获得的拷贝和外部方法不一致。所以java强制要求只能使用final量。</p>
<h1 id="静态内部类和非静态内部类的区别"><a href="#静态内部类和非静态内部类的区别" class="headerlink" title="静态内部类和非静态内部类的区别"></a>静态内部类和非静态内部类的区别</h1><p>如果你不需要内部类对象与其外围类对象之间有联系，那你可以将内部类声明为static。这通常称为嵌套类（nested class）。Static Nested Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化。想要理解static应用于内部类时的含义，你就必须记住，普通的内部类对象隐含地保存了一个引用，指向创建它的外围类对象。然而，当内部类是static的时，就不是这样了。嵌套类意味着： </p>
<ol>
<li><p>嵌套类的对象，并不需要其外围类的对象。 </p>
</li>
<li><p>不能从嵌套类的对象中访问非静态的外围类对象。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public class StaticTest&#123;</div><div class="line">   private static String name = &quot;woobo&quot;;</div><div class="line">   private String num = &quot;X001&quot;;</div><div class="line">   static class Person&#123; // 静态内部类可以用public,protected,private修饰 </div><div class="line"></div><div class="line">       // 静态内部类中可以定义静态或者非静态的成员  </div><div class="line">     private String address = &quot;China&quot;;</div><div class="line"></div><div class="line">Private Static String x=“as”;</div><div class="line">     public String mail = &quot;kongbowoo@yahoo.com.cn&quot;;//内部类公有成员</div><div class="line">     public void display()&#123;</div><div class="line">       //System.out.println(num);//不能直接访问外部类的非静态成员</div><div class="line"></div><div class="line">// 静态内部类不能访问外部类的非静态成员(包括非静态变量和非静态方法)</div><div class="line">       System.out.println(name);//只能直接访问外部类的静态成员</div><div class="line"></div><div class="line">//静态内部类只能访问外部类的静态成员(包括静态变量和静态方法)</div><div class="line">       System.out.println(&quot;Inner &quot; + address);//访问本内部类成员。</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">   public void printInfo()&#123;</div><div class="line">     Person person = new Person();</div><div class="line"></div><div class="line">// 外部类访问内部类的非静态成员:实例化内部类即可 </div><div class="line"></div><div class="line">person.display();</div><div class="line"></div><div class="line">     //System.out.println(mail);//不可访问</div><div class="line">     //System.out.println(address);//不可访问</div><div class="line">     System.out.println(person.address);//可以访问内部类的私有成员</div><div class="line"></div><div class="line">System.out.println(Person.x);// 外部类访问内部类的静态成员：内部类.静态成员</div><div class="line">     System.out.println(person.mail);//可以访问内部类的公有成员</div><div class="line">   &#125;</div><div class="line">   public static void main(String[] args)&#123;</div><div class="line">     StaticTest staticTest = new StaticTest();</div><div class="line">     staticTest.printInfo();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在静态嵌套类内部, 不能访问外部类的非静态成员, 这是由Java语法中”静态方法不能直接访问非静态成员”所限定.注意, 外部类访问内部类的的成员有些特别, 不能直接访问, 但可以通过内部类实例来访问, 这是因为静态嵌套内的所有成员和方法默认为静态的了.同时注意, 内部静态类Person只在类StaticTest 范围内可见, 若在其它类中引用或初始化, 均是错误的.<br>一 . 静态内部类可以有静态成员，而非静态内部类则不能有静态成员。<br>二 . 静态内部类的非静态成员可以访问外部类的静态变量，而不可访问外部类的非静态变量；</p>
<p>三 . 非静态内部类的非静态成员可以访问外部类的非静态变量。</p>
<p>生成一个静态内部类不需要外部类成员：这是静态内部类和成员内部类的区别。静态内部类的对象可以直接生成：Outer.Inner in = new Outer.Inner();而不需要通过生成外部类对象来生成。这样实际上使静态内部类成为了一个顶级类(正常情况下，你不能在接口内部放置任何代码，但嵌套类可以作为接口的一部分，因为它是static 的。只是将嵌套类置于接口的命名空间内，这并不违反接口的规则）</p>
<blockquote>
<p>原文地址：<a href="http://www.cnblogs.com/WuXuanKun/p/6220964.html" target="_blank" rel="external">http://www.cnblogs.com/WuXuanKun/p/6220964.html</a>   </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内部类是指在一个外部类的内部再定义一个类。内部类作为外部类的一个成员，并且依附于外部类而存在的。内部类可为静态，可用protected和private修饰（而外部类只能使用public和缺省的包访问权限）。内部类主要有以下几类：成员内部类、局部内部类、静态内部类、匿名内部类
    
    </summary>
    
      <category term="Java" scheme="https://devallever.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://devallever.github.io/tags/Java/"/>
    
      <category term="内部类" scheme="https://devallever.github.io/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android练手项目 极简天气</title>
    <link href="https://devallever.github.io/2017/04/26/myCoolWeather/"/>
    <id>https://devallever.github.io/2017/04/26/myCoolWeather/</id>
    <published>2017-04-26T04:07:24.000Z</published>
    <updated>2017-05-10T04:15:23.495Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.bing.com/az/hprichbg/rb/CivitadiBagnoregio_ZH-CN12942138675_1366x768.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>项目地址:  <a href="https://github.com/devallever/MyCoolWeather" target="_blank" rel="external">https://github.com/devallever/MyCoolWeather</a></p>
<p><a href="https://raw.githubusercontent.com/devallever/MyCoolWeather/master/app/simpleWeather.apk" target="_blank" rel="external">下载apk</a></p>
<p>我的博客: <a href="https://devallever.github.io/">https://devallever.github.io/</a></p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>极简天气, 天气应用,是我看完Android第一行代码后, 参考并修改的练习项目, 以巩固所学知识</p>
<p>感谢开源</p>
<ul>
<li>OkHttp</li>
<li>Retrofit</li>
<li>Glide</li>
<li>RxJava/RxAndroid</li>
<li>LitePal</li>
<li><p>EventBus</p>
<p>感谢郭神提供天气数据接口</p>
</li>
</ul>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h2><ul>
<li>显示实时天气, 三天预报, 空气质量, 温馨提示</li>
<li>获取Bing每日图片</li>
<li>滑动切换城市</li>
<li>城市管理: 增加,删除</li>
<li>下拉刷新</li>
<li>缓存省市县, 天气信息</li>
</ul>
<p><img src="https://github.com/devallever/MyCoolWeather/blob/master/pic_01.png?raw=true" alt=""><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/devallever/MyCoolWeather/blob/master/pic_02.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/devallever/MyCoolWeather/blob/master/pic_03.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/devallever/MyCoolWeather/blob/master/pic_04.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/devallever/MyCoolWeather/blob/master/pic_05.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/devallever/MyCoolWeather/blob/master/pic_06.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/devallever/MyCoolWeather/blob/master/pic_07.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/devallever/MyCoolWeather/blob/master/pic_08.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>  </p>
<h2 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h2><ul>
<li>后台自动刷新</li>
<li>自动下载壁纸</li>
<li>刷新天气随机更换壁纸</li>
<li>天气提醒</li>
<li>查看历史天气</li>
<li>关于</li>
</ul>
<h2 id="已知bug"><a href="#已知bug" class="headerlink" title="已知bug"></a>已知bug</h2><p>在主界面旋转屏幕时候, 报错<br>找不到数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weatherList = DataSupport.where(&quot;weatherId = ? &quot;, weather_id).find(Weather.class);</div></pre></td></tr></table></figure></p>
<p>我想应该是旋转时候Activity和Fragment重新运行导致,weatherId空了, 导致查不到数据<br>然而我在Activity的onSaveInstanceState方法中保存了临时数据<br>并在onCreate中进行数据恢复,还是不行</p>
<h1 id="功能实现细节"><a href="#功能实现细节" class="headerlink" title="功能实现细节"></a>功能实现细节</h1><h2 id="第二版功能细节"><a href="#第二版功能细节" class="headerlink" title="第二版功能细节"></a>第二版功能细节</h2><h3 id="后台自动更新天气信息"><a href="#后台自动更新天气信息" class="headerlink" title="后台自动更新天气信息"></a>后台自动更新天气信息</h3><p>使用服务, 启动服务后通过AlarmManager设置一个定时任务,每隔一小时更新天气信息, 在退出程序时候启动该服务,在服务中主要执行了两个方法分别更新天气信息和壁纸, 请求网络后把数据保存到Weather表中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public int onStartCommand(Intent intent,  int flags, int startId) &#123;</div><div class="line">    Log.d(TAG, &quot;onStartCommand: ()&quot;);</div><div class="line">    updateWeather();</div><div class="line">    updateImage();</div><div class="line">    int anHour = 1 * 60 * 60 * 1000;   //１小时</div><div class="line">    //int anHour = 10* 1000;   //10秒</div><div class="line">    long triggerAtTime = SystemClock.elapsedRealtime() + anHour;</div><div class="line">    AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);</div><div class="line">    Intent serviceIntent = new Intent(this, AutoUpdateService.class);</div><div class="line">    //Intent receiverIntent = new Intent(this, AutoUpdateReceiver.class);</div><div class="line">    PendingIntent pendingIntent = PendingIntent.getService(this,0,serviceIntent,0);</div><div class="line">    alarmManager.cancel(pendingIntent);</div><div class="line">    alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtTime,pendingIntent);</div><div class="line">    return super.onStartCommand(intent, flags, startId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDestroy() &#123;</div><div class="line">    //启动后台更新服务</div><div class="line">    Intent serviceIntent = new Intent(this, AutoUpdateService.class);</div><div class="line">    startService(serviceIntent);</div><div class="line">    super.onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="天气提醒功能"><a href="#天气提醒功能" class="headerlink" title="天气提醒功能"></a>天气提醒功能</h3><p>每次后台获取更新后,判断该城市是否显示通知, 是的话就对天气信息进一步分析:  </p>
<p>昼夜温度大于10度时提醒,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int max = Integer.valueOf(newWeather.getDaily_forecast().get(0).getTmp().getMax());</div><div class="line">int min = Integer.valueOf(newWeather.getDaily_forecast().get(0).getTmp().getMin());</div><div class="line">if ((max-min) &gt;=10 )&#123;</div><div class="line">//显示通知</div><div class="line">builder.setContentText( county + &quot;: 昼夜温差较大,请预防感冒!&quot;);</div><div class="line">notificationManager.notify(id,builder.build());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>今明天气相差5度时提醒<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//2.比较今天明天气温相差5度提示</div><div class="line">Daily_forecast today = newWeather.getDaily_forecast().get(0);</div><div class="line">Daily_forecast tomorrow = newWeather.getDaily_forecast().get(1);</div><div class="line">int todayTmp = Integer.valueOf(today.getTmp().getMin());</div><div class="line">int tomorrowTmp = Integer.valueOf(tomorrow.getTmp().getMin());</div><div class="line">if ( Math.abs(todayTmp-tomorrowTmp) &gt;= 5)&#123;</div><div class="line">	if (tomorrowTmp &gt; todayTmp)&#123;</div><div class="line">		builder.setContentText( county + &quot;: 明天将大幅度升温!&quot;);</div><div class="line">	&#125;else &#123;</div><div class="line">		builder.setContentText( county + &quot;: 明天将大幅度降温温!&quot;);</div><div class="line">	&#125;</div><div class="line">notificationManager.notify(id+1000,builder.build());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有降水提示带伞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//3. 有雨的要带伞</div><div class="line">if (tomorrow.getCond().getTxt_d().contains(&quot;雨&quot;))&#123;</div><div class="line">	builder.setContentText( county + &quot;: 明天将有&quot; + tomorrow.getCond().getTxt_d() + &quot;, 出门记得带伞.&quot;);</div><div class="line">	notificationManager.notify(id+1001,builder.build());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当实时天气与上一次的天气有不同时候,提醒<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//4. 比较实时天气</div><div class="line">String old = oldWeather.getNow().getCond().getTxt();</div><div class="line">String newInfo = newWeather.getNow().getCond().getTxt();</div><div class="line">if (!old.equals(newInfo))&#123;</div><div class="line">	builder.setContentText( county + &quot;: &quot; + newWeather.getNow().getCond().getTxt());</div><div class="line">	notificationManager.notify(id+1002,builder.build());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="查看历史天气"><a href="#查看历史天气" class="headerlink" title="查看历史天气"></a>查看历史天气</h3><p>创建一个数据库表HistoryWeather用来保存历史天气信息<br>id, weatherId, countyName, date,  weatehr, min, max<br>每次后台自动更新天气数据时候，解析json数据，获取所需数据封装成HIstoryWeather，然后保存，根据date和weatherId字段获取要保存的记录，如果存在的就更新，不存在的就天机记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">private void saveHistoryWeather(String result)&#123;</div><div class="line">    Gson gson = new Gson();</div><div class="line">    HeWeather5 heWeather5 = gson.fromJson(result,Root.class).getHeWeather5().get(0);</div><div class="line"></div><div class="line">    List&lt;Daily_forecast&gt; daily_forecastList = heWeather5.getDaily_forecast();</div><div class="line">    //for (Daily_forecast daily_forecast :daily_forecastList)&#123;</div><div class="line">    Daily_forecast today = daily_forecastList.get(0);</div><div class="line">        String date = today.getDate();</div><div class="line">        String weather = today.getCond().getTxt_d();</div><div class="line">        String weatherId = heWeather5.getBasic().getId();</div><div class="line">        String countyName = heWeather5.getBasic().getCity();</div><div class="line">        String min = today.getTmp().getMin();</div><div class="line">        String max = today.getTmp().getMax();</div><div class="line">        HistoryWeather historyWeather = new HistoryWeather();</div><div class="line">        historyWeather.setDate(date);</div><div class="line">        historyWeather.setWeatherId(weatherId);</div><div class="line">        historyWeather.setCountyName(countyName);</div><div class="line">        historyWeather.setWeather(weather);</div><div class="line">        historyWeather.setMin(min);</div><div class="line">        historyWeather.setMax(max);</div><div class="line">        historyWeather.saveOrUpdate(&quot;weatherId=? and date=?&quot;, weatherId, date);</div><div class="line">    //&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查找历史天气信息时候，默认是查找前30条记录，并且按date降序排列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;HistoryWeather&gt; historyWeatherList;</div><div class="line">historyWeatherList = DataSupport.where(&quot;weatherId=? order by date desc&quot;, weatherId).find(HistoryWeather.class);</div><div class="line">for (HistoryWeather historyWeather: historyWeatherList)&#123;</div><div class="line">    HistoryWeatherItem historyWeatherItem = new HistoryWeatherItem();</div><div class="line">    historyWeatherItem.setWeather(historyWeather.getWeather());</div><div class="line">    historyWeatherItem.setDate(historyWeather.getDate());</div><div class="line">    historyWeatherItem.setMax(historyWeather.getMax());</div><div class="line">    historyWeatherItem.setMin(historyWeather.getMin());</div><div class="line">    historyWeatherItemList.add(historyWeatherItem);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="第一版功能细节"><a href="#第一版功能细节" class="headerlink" title="第一版功能细节"></a>第一版功能细节</h2><h3 id="选择城市-ChooseCItyActivity"><a href="#选择城市-ChooseCItyActivity" class="headerlink" title="选择城市 ChooseCItyActivity"></a>选择城市 ChooseCItyActivity</h3><p>首先访问数据库中是否有所有省份数据,有则获取,没有则请求服务器,然后得到全国省份的json数据,保存到数据库中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private void queryProvince()&#123;</div><div class="line">    toolbar.setTitle(&quot;中国&quot;);</div><div class="line">    provinceList = DataSupport.findAll(Province.class);</div><div class="line">    if (provinceList.size() &gt; 0)&#123;</div><div class="line">        dataList.clear();</div><div class="line">        for (Province province:provinceList)&#123;</div><div class="line">            dataList.add(province.getProvinceName());</div><div class="line">        &#125;</div><div class="line">        adapter.notifyDataSetChanged();</div><div class="line">        listView.setSelection(0);</div><div class="line">        currentLevel = LEVEL_PROVINCE;</div><div class="line">    &#125;else &#123;</div><div class="line">        String address = &quot;http://guolin.tech/api/china/&quot;;</div><div class="line">        queryFromServer(address, &quot;province&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static boolean handleProvinceResponse(String response)&#123;</div><div class="line">    if (!TextUtils.isEmpty(response))&#123;</div><div class="line">        try &#123;</div><div class="line">            JSONArray allProvince = new JSONArray(response);</div><div class="line">            for (int i = 0; i&lt;allProvince.length(); i++)&#123;</div><div class="line">                JSONObject provinceObject = allProvince.getJSONObject(i);</div><div class="line">                Province province = new Province();</div><div class="line">                province.setProvinceCode(provinceObject.getInt(&quot;id&quot;));</div><div class="line">                province.setProvinceName(provinceObject.getString(&quot;name&quot;));</div><div class="line">                province.save();</div><div class="line">            &#125;</div><div class="line">            return  true;</div><div class="line">        &#125;catch (JSONException je)&#123;</div><div class="line">            je.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后解析json数据,设置到Listview中,点击时记录省份id, 然后根据这个id访问数据库中是否有该省份的城市信息,有则获取,没有则请求服务器,然后得到该省份所有城市的json数据,保存到数据库中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private void queryCity()&#123;</div><div class="line">    toolbar.setTitle(selectedProvince.getProvinceName());</div><div class="line">    cityList = DataSupport.where(&quot;provinceCode = ? &quot;, String.valueOf(selectedProvince.getProvinceCode())).find(City.class);</div><div class="line">    if (cityList.size() &gt; 0)&#123;</div><div class="line">        dataList.clear();</div><div class="line">        for (City city: cityList)&#123;</div><div class="line">            dataList.add(city.getCityName());</div><div class="line">        &#125;</div><div class="line">        adapter.notifyDataSetChanged();</div><div class="line">        listView.setSelection(0);</div><div class="line">        currentLevel = LEVEL_CITY;</div><div class="line">    &#125;else &#123;</div><div class="line">        int provinceCode = selectedProvince.getProvinceCode();</div><div class="line">        String address = &quot;http://guolin.tech/api/china/&quot; + provinceCode;</div><div class="line">        queryFromServer(address,&quot;city&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public static boolean handleCityResponse(String response, int provinceCode)&#123;</div><div class="line">    if (!TextUtils.isEmpty(response))&#123;</div><div class="line">        try &#123;</div><div class="line">            Log.d(TAG, &quot;handleCityResponse: \n response = &quot; + response);</div><div class="line">            JSONArray allCity = new JSONArray(response);</div><div class="line">            for (int i = 0; i&lt; allCity.length(); i++)&#123;</div><div class="line">                JSONObject cityObject = allCity.getJSONObject(i);</div><div class="line">                City city = new City();</div><div class="line">                city.setCityCode(cityObject.getInt(&quot;id&quot;));</div><div class="line">                city.setCityName(cityObject.getString(&quot;name&quot;));</div><div class="line">                city.setProvinceCode(provinceCode);</div><div class="line">                city.save();</div><div class="line">            &#125;</div><div class="line">            return true;</div><div class="line">        &#125;catch (JSONException je)&#123;</div><div class="line">            je.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后解析json数据,清空listview数据源, 然后加载该省的所有城市数据,设置到ListView中,点击时记录该市的id, 然后根据这个id访问数据库中是否存在该市的所有县数据,有则获取, 没有则请求服务器,然后得到该市所有县的json数据,保存到数据库中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private void queryCounty()&#123;</div><div class="line">    toolbar.setTitle(selectedCity.getCityName());</div><div class="line">    Toast.makeText(this,&quot;cityCode = &quot;+ selectedCity.getCityCode() + &quot;\n&quot; +</div><div class="line">            &quot;id = &quot; + selectedCity.getId(),Toast.LENGTH_LONG ).show();</div><div class="line">    countyList = DataSupport.where(&quot;cityCode = ?&quot;, String.valueOf(selectedCity.getId())).find(County.class);</div><div class="line">    if (countyList.size() &gt; 0 )&#123;</div><div class="line">        dataList.clear();</div><div class="line">        for (County county: countyList)&#123;</div><div class="line">            dataList.add(county.getCountyName());</div><div class="line">        &#125;</div><div class="line">        adapter.notifyDataSetChanged();</div><div class="line">        listView.setSelection(0);</div><div class="line">        currentLevel = LEVEL_COUNTY;</div><div class="line">    &#125;else &#123;</div><div class="line">        int provinceCode = selectedProvince.getProvinceCode();</div><div class="line">        int cityCode = selectedCity.getCityCode();</div><div class="line">        String address = &quot;http://guolin.tech/api/china/&quot; + provinceCode + &quot;/&quot;  + cityCode;</div><div class="line">        queryFromServer(address,&quot;county&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static boolean handleCountyResponse(String response, int cityCode)&#123;</div><div class="line">    if (!TextUtils.isEmpty(response)) &#123;</div><div class="line">        try &#123;</div><div class="line">            JSONArray allCounty = new JSONArray(response);</div><div class="line">            for (int i = 0; i &lt; allCounty.length(); i++) &#123;</div><div class="line">                JSONObject countyObject = allCounty.getJSONObject(i);</div><div class="line">                County county = new County();</div><div class="line">                county.setCountyName(countyObject.getString(&quot;name&quot;));</div><div class="line">                county.setWeatherId(countyObject.getString(&quot;weather_id&quot;));</div><div class="line">                county.setCityCode(cityCode);</div><div class="line">                boolean successed = county.save();</div><div class="line">                if (successed) Log.d(TAG, &quot;handleCountyResponse: save success&quot;);</div><div class="line">                else Log.d(TAG, &quot;handleCountyResponse: save fail&quot;);</div><div class="line">            &#125;</div><div class="line">            return true;</div><div class="line">        &#125; catch (JSONException je) &#123;</div><div class="line">            je.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>选择其中某一项, 获取weatherId和县名称countyName, 通过setResult返回父Activity中,<br>在父Activity中onActivityResult方法中, 把weatherId和countyName保存到Weather数据表中, 然后重新获取weather表中数据.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">listView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</div><div class="line">        if (currentLevel == LEVEL_PROVINCE)&#123;</div><div class="line">            selectedProvince = provinceList.get(position);</div><div class="line">            queryCity();</div><div class="line">        &#125;else if (currentLevel == LEVEL_CITY)&#123;</div><div class="line">            selectedCity = cityList.get(position);</div><div class="line">            Toast.makeText(ChooseCityActivity.this,&quot;id = &quot;  + selectedCity.getId() + &quot;\n&quot;+</div><div class="line">                    &quot;cityName = &quot; + selectedCity.getCityName() + &quot;\n&quot; +</div><div class="line">                    &quot;cityCode = &quot; + selectedCity.getCityCode() + &quot;\n&quot; +</div><div class="line">                    &quot;provinceCode = &quot; + selectedCity.getProvinceCode(),Toast.LENGTH_SHORT).show();</div><div class="line">            queryCounty();</div><div class="line">        &#125;else if (currentLevel == LEVEL_COUNTY)&#123;</div><div class="line">            selectedCounty = countyList.get(position);</div><div class="line">            Toast.makeText(ChooseCityActivity.this,&quot;id = &quot;  + selectedCounty.getId() + &quot;\n&quot;+</div><div class="line">                    &quot;countyName = &quot; + selectedCounty.getCountyName() + &quot;\n&quot; +</div><div class="line">                    &quot;weather_id = &quot; + selectedCounty.getWeatherId(),Toast.LENGTH_SHORT).show();</div><div class="line">            Intent intent = new Intent();</div><div class="line">            intent.putExtra(&quot;weather_id&quot;, selectedCounty.getWeatherId());</div><div class="line">            intent.putExtra(&quot;county_name&quot;,selectedCounty.getCountyName());</div><div class="line">            setResult(RESULT_OK,intent);</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>回到父Activity进行操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">String weather_id = data.getStringExtra(&quot;weather_id&quot;);</div><div class="line">List&lt;Weather&gt; weatherList = DataSupport.where(&quot;weatherId = ? &quot;, weather_id).find(Weather.class);</div><div class="line">if (weatherList != null &amp;&amp; weatherList.size()==0)&#123;</div><div class="line">	Weather weather = new Weather();</div><div class="line">	weather.setCountyName(data.getStringExtra(&quot;county_name&quot;));</div><div class="line">	weather.setWeatherId(data.getStringExtra(&quot;weather_id&quot;));</div><div class="line">	weather.setIsShow(&quot;1&quot;);</div><div class="line">	weather.save();</div><div class="line">	titleList.add(weather.getCountyName());</div><div class="line">	WeatherFragment weatherFragment = new WeatherFragment(weather.getWeatherId());</div><div class="line">	weatherFragmentList.add(weatherFragment);</div><div class="line">	weatherPageAdapter.notifyDataSetChanged();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="构造ViewPager天气页面数据源"><a href="#构造ViewPager天气页面数据源" class="headerlink" title="构造ViewPager天气页面数据源"></a>构造ViewPager天气页面数据源</h3><p>在MainActivity中,访问数据库weather表, (条件:isShow=1,表示显示是否显示在主界面), 把查询结果存到List中,如果list大小为0, 则打开选择城市界面,如果存在数据,则遍历每个weather对象,创建WeatherFragment,并把weather对象中的weatherId传到Fragment的构造方法中,并添加到fragmengList中, WeatherFragment会根据这个weatherId获取天气信息,同时把weather的countyName添加到titleLists中用于设置每个pager的标题,,,然后通知adapter数据更新了,<br>pagerAdapter是通过fragmengList和titleList绑定数据的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private void showWeather()&#123;</div><div class="line">    weatherList.clear();</div><div class="line">    weatherFragmentList.clear();</div><div class="line">    titleList.clear();</div><div class="line">    weatherList = DataSupport.where(&quot;isShow=?&quot;, &quot;1&quot;).find(Weather.class);</div><div class="line">    if (weatherList.size() ==0)&#123;</div><div class="line">        //转到选择城市Activity</div><div class="line">        Intent intent = new Intent(this, ChooseCityActivity.class);</div><div class="line">        startActivityForResult(intent, REQUEST_CODE_CHOOSE_CITY);</div><div class="line">    &#125;else &#123;</div><div class="line">        for (Weather weather: weatherList) &#123;</div><div class="line">            titleList.add(weather.getCountyName());</div><div class="line">            WeatherFragment weatherFragment = new WeatherFragment(weather.getWeatherId());</div><div class="line">            weatherFragmentList.add(weatherFragment);</div><div class="line">        &#125;</div><div class="line">        weatherPageAdapter.notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>选择城市后返回的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">String weather_id = data.getStringExtra(&quot;weather_id&quot;);</div><div class="line">List&lt;Weather&gt; weatherList = DataSupport.where(&quot;weatherId = ? &quot;, weather_id).find(Weather.class);</div><div class="line">if (weatherList != null &amp;&amp; weatherList.size()==0)&#123;</div><div class="line">	Weather weather = new Weather();</div><div class="line">	weather.setCountyName(data.getStringExtra(&quot;county_name&quot;));</div><div class="line">	weather.setWeatherId(data.getStringExtra(&quot;weather_id&quot;));</div><div class="line">	weather.setIsShow(&quot;1&quot;);</div><div class="line">	weather.save();</div><div class="line">	titleList.add(weather.getCountyName());</div><div class="line">	WeatherFragment weatherFragment = new WeatherFragment(weather.getWeatherId());</div><div class="line">	weatherFragmentList.add(weatherFragment);</div><div class="line">	weatherPageAdapter.notifyDataSetChanged();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="城市管理-CityManageActivity"><a href="#城市管理-CityManageActivity" class="headerlink" title="城市管理-CityManageActivity"></a>城市管理-CityManageActivity</h3><p>该页面有一个RecyclerView,和一个FloatingActionButton, 其中recyclerView的item是一个CardView, 显示了该城市粗略的天气信息,如温度和天气,fab用于添加城市,可以通过左右滑动每一个卡片来删除数据,<br>请求数据库, 访问weather表的所有数据, 抽取其中所需的信息封装到CityItem中,然后添加到cityItemList中,作为RecyclerView的数据源,当成功选择一个城市并返回后,根据返回的weatherId访问数据库是否存在该数据,有则不操作,没有则添加到weather表中.以免产生冗余数据.当滑动删除城市后,会从数据表中删除掉这条记录,(改进的做法是滑动删除后显示一个Snackbar来确认操作)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">weatherList = DataSupport.findAll(Weather.class);</div><div class="line">Gson gson = new Gson();</div><div class="line">Root root;</div><div class="line">for (Weather weather: weatherList)&#123;</div><div class="line">	CityItem cityItem = new CityItem();</div><div class="line">	cityItem.setIsShow(weather.getIsShow());</div><div class="line">	root = gson.fromJson(weather.getWeatherInfo(),Root.class);</div><div class="line">	if (root!=null)&#123;</div><div class="line">		cityItem.setTmp(root.getHeWeather5().get(0).getNow().getTmp());</div><div class="line">		cityItem.setWeather(root.getHeWeather5().get(0).getNow().getCond().getTxt());</div><div class="line">		cityItem.setCounty(weather.getCountyName());</div><div class="line">		cityItem.setWeatherId(weather.getWeatherId());</div><div class="line">		cityItemList.add(cityItem);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">cityRecyclerAdapter.notifyDataSetChanged();</div></pre></td></tr></table></figure></p>
<p>滑动删除后的操作-我还在进一步研究,不是很懂,因为是复制别人的代码<br>关联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//关联ItemTouchHelper和RecyclerView</div><div class="line">ItemTouchHelper.Callback callback = new ItemTouchHelperCallback(cityRecyclerAdapter);</div><div class="line">ItemTouchHelper mItemTouchHelper = new ItemTouchHelper(callback);</div><div class="line">mItemTouchHelper.attachToRecyclerView(recyclerView);</div></pre></td></tr></table></figure></p>
<p>ItemTouchHelperCallback:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class ItemTouchHelperCallback extends ItemTouchHelper.Callback &#123;</div><div class="line"></div><div class="line">    private OnMoveAndSwipedListener moveAndSwipedListener;</div><div class="line"></div><div class="line">    public ItemTouchHelperCallback(OnMoveAndSwipedListener listener) &#123;</div><div class="line">        this.moveAndSwipedListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //设置拖动方向以及侧滑方向</div><div class="line">    @Override</div><div class="line">    public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) &#123;</div><div class="line">        if (recyclerView.getLayoutManager() instanceof LinearLayoutManager) &#123;</div><div class="line">            //单列的RecyclerView支持上下拖动和左右侧滑</div><div class="line">            final int dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">            final int swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">            return makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">        &#125; else &#123;</div><div class="line">            //多列的RecyclerView支持上下左右拖动和不支持左右侧滑</div><div class="line">            final int dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN | ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;</div><div class="line">            final int swipeFlags = 0;</div><div class="line">            return makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //拖动item时会调用此方法</div><div class="line">    @Override</div><div class="line">    public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) &#123;</div><div class="line">        //如果两个item不是同一个类型的，不让他拖拽</div><div class="line">        if (viewHolder.getItemViewType() != target.getItemViewType()) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        moveAndSwipedListener.onItemMove(viewHolder.getAdapterPosition(), target.getAdapterPosition());</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //侧滑item时会调用此方法</div><div class="line">    @Override</div><div class="line">    public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) &#123;</div><div class="line">        moveAndSwipedListener.onItemDismiss(viewHolder.getAdapterPosition());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>OnMoveAndSwipedListener:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public interface OnMoveAndSwipedListener &#123;</div><div class="line"></div><div class="line">    boolean onItemMove(int fromPosition, int toPosition);</div><div class="line"></div><div class="line">    void onItemDismiss(int position);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>监听到滑动删除执行以下方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onItemMove(int fromPosition, int toPosition) &#123;</div><div class="line">    notifyItemMoved(fromPosition, toPosition);</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onItemDismiss(int position) &#123;</div><div class="line">    DataSupport.deleteAll(Weather.class,&quot;weatherId=?&quot;,cityItemList.get(position).getWeatherId());</div><div class="line">    cityItemList.remove(position);</div><div class="line">    notifyItemRemoved(position);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="显示天气-WeatherFragmeng"><a href="#显示天气-WeatherFragmeng" class="headerlink" title="显示天气-WeatherFragmeng"></a>显示天气-WeatherFragmeng</h3><p>显示天气信息是在WeatherFragment中完成的, 也就是每个页面. 从构造方法中获取到该所显示城市的天气数据, 根据这个weatherId访问数据库中该weatherId所在记录是否有weatherInfo信息,如果有则获取该天气信息的json数据, 没有则向服务器请求数据,获取天气信息,成功获取信息之后保存到数据库中.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">weatherList = DataSupport.where(<span class="string">"weatherId = ? "</span>, weather_id).find(Weather.class);</div><div class="line"><span class="keyword">if</span> (weatherList != <span class="keyword">null</span> &amp;&amp; weatherList.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">	<span class="keyword">if</span> (TextUtils.isEmpty(weatherList.get(<span class="number">0</span>).getWeatherInfo())) sendWeatherInfoRequest();</div><div class="line">	<span class="keyword">else</span> handleWeatherInfoResponse(weatherList.get(<span class="number">0</span>).getWeatherInfo());</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//get dada from internet</span></div><div class="line">	sendWeatherInfoRequest();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取后保存到数据库<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">String responseText = response.body().string();</div><div class="line">Weather weather = <span class="keyword">new</span> Weather();</div><div class="line">weather.setWeatherInfo(responseText);</div><div class="line">weather.updateAll(<span class="string">"weatherId=?"</span>, weather_id);</div><div class="line">getActivity().runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		handleWeatherInfoResponse(responseText);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<p>持续更新……..<br>欢迎大家共同学习共同成长…..</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
    
    </summary>
    
      <category term="Android" scheme="https://devallever.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://devallever.github.io/tags/Android/"/>
    
      <category term="Project" scheme="https://devallever.github.io/tags/Project/"/>
    
  </entry>
  
  <entry>
    <title>滚动屏幕自动隐藏FloatingActionButton</title>
    <link href="https://devallever.github.io/2017/04/24/fab-auto-hideshow/"/>
    <id>https://devallever.github.io/2017/04/24/fab-auto-hideshow/</id>
    <published>2017-04-24T01:56:01.000Z</published>
    <updated>2017-04-24T03:50:43.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>FloatingActionButton可以说是Material Design 的标志之一了，但是却有很多人并不是很喜欢它，其中一条主要的原因就是FAB的存在挡住了要显示的内容，从而影响体验。<br>本文主要介绍对FAB两方面的优化，一方面是点击FAB弹出子菜单的特效，一方面是在滑动时自动隐藏FAB。最终的实现</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p> 它的显示与隐藏是根据AppBarLayout的Y值来决定的，我们知道如果按照最上面的方式定义主界面布局，列表滚动的时候toolbar会显示和隐藏，而toolbar是AppBarLayout的一部分，因此可以让Behavior依赖于AppBarLayout，当AppBarLayout变化的时候会调用onDependentViewChanged，然后在这里获取AppBarLayout的高度移动的距离，然后根据这个距离来判定FloatingActionButton上下移动的距离，从而实现了FloatingActionButton的显示和隐藏。这个实现方式我是在这里找到的： <a href="http://stackoverflow.com/questions/31457099/android-fab-to-hide-when-navigating-between-different-fragments-in-a-viewpager" target="_blank" rel="external">http://stackoverflow.com/questions/31457099/android-fab-to-hide-when-navigating-between-different-fragments-in-a-viewpager</a> </p>
<h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">public class FABVerticalBehavior extends FloatingActionButton.Behavior &#123;</div><div class="line">    private static final Interpolator INTERPOLATOR = new FastOutSlowInInterpolator();</div><div class="line">    private boolean mIsAnimatingOut = false;</div><div class="line"></div><div class="line">    public FABVerticalBehavior(Context context, AttributeSet attrs) &#123;</div><div class="line">        super();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onStartNestedScroll(final CoordinatorLayout coordinatorLayout, final FloatingActionButton child,</div><div class="line">                                       final View directTargetChild, final View target, final int nestedScrollAxes) &#123;</div><div class="line">        // Ensure we react to vertical scrolling</div><div class="line">        return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL</div><div class="line">                || super.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onNestedScroll(final CoordinatorLayout coordinatorLayout, final FloatingActionButton child,</div><div class="line">                               final View target, final int dxConsumed, final int dyConsumed,</div><div class="line">                               final int dxUnconsumed, final int dyUnconsumed) &#123;</div><div class="line">        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class="line">        if (dyConsumed &gt; 0 &amp;&amp; !this.mIsAnimatingOut &amp;&amp; child.getVisibility() == View.VISIBLE) &#123;</div><div class="line">            // User scrolled down and the FAB is currently visible -&gt; hide the FAB</div><div class="line">            animateOut(child);</div><div class="line">        &#125; else if (dyConsumed &lt; 0 &amp;&amp; child.getVisibility() != View.VISIBLE) &#123;</div><div class="line">            // User scrolled up and the FAB is currently not visible -&gt; show the FAB</div><div class="line">            animateIn(child);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Same animation that FloatingActionButton.Behavior uses to hide the FAB when the AppBarLayout exits</div><div class="line">    private void animateOut(final FloatingActionButton button) &#123;</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= 14) &#123;</div><div class="line">            ViewCompat.animate(button).translationY(button.getHeight() + getMarginBottom(button)).setInterpolator(INTERPOLATOR).withLayer()</div><div class="line">                    .setListener(new ViewPropertyAnimatorListener() &#123;</div><div class="line">                        public void onAnimationStart(View view) &#123;</div><div class="line">                            FABVerticalBehavior.this.mIsAnimatingOut = true;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        public void onAnimationCancel(View view) &#123;</div><div class="line">                            FABVerticalBehavior.this.mIsAnimatingOut = false;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        public void onAnimationEnd(View view) &#123;</div><div class="line">                            FABVerticalBehavior.this.mIsAnimatingOut = false;</div><div class="line">                            view.setVisibility(View.GONE);</div><div class="line">                        &#125;</div><div class="line">                    &#125;).start();</div><div class="line">        &#125; else &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Same animation that FloatingActionButton.Behavior uses to show the FAB when the AppBarLayout enters</div><div class="line">    private void animateIn(FloatingActionButton button) &#123;</div><div class="line">        button.setVisibility(View.VISIBLE);</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= 14) &#123;</div><div class="line">            ViewCompat.animate(button).translationY(0)</div><div class="line">                    .setInterpolator(INTERPOLATOR).withLayer().setListener(null)</div><div class="line">                    .start();</div><div class="line">        &#125; else &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int getMarginBottom(View v) &#123;</div><div class="line">        int marginBottom = 0;</div><div class="line">        final ViewGroup.LayoutParams layoutParams = v.getLayoutParams();</div><div class="line">        if (layoutParams instanceof ViewGroup.MarginLayoutParams) &#123;</div><div class="line">            marginBottom = ((ViewGroup.MarginLayoutParams) layoutParams).bottomMargin;</div><div class="line">        &#125;</div><div class="line">        return marginBottom;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>在25.0.1以上版本的design包中，会有隐藏后不显示的Bug</li>
</ul>
<blockquote>
<p><a href="http://stackoverflow.com/questions/41142711/25-1-0-android-support-lib-is-breaking-fab-behavior" target="_blank" rel="external">参考这里</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;FloatingActionButton可以说是Material Design 的标志之一了，但是却有很多人并不是很喜欢它，其中一条主要的原
    
    </summary>
    
      <category term="Android" scheme="https://devallever.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://devallever.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 应用开发所需的技能和自我评分</title>
    <link href="https://devallever.github.io/2017/04/23/android-developer-base-skill-20/"/>
    <id>https://devallever.github.io/2017/04/23/android-developer-base-skill-20/</id>
    <published>2017-04-23T02:22:57.000Z</published>
    <updated>2017-04-23T02:57:07.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-应用开发所需的技能和自我评分"><a href="#Android-应用开发所需的技能和自我评分" class="headerlink" title="Android 应用开发所需的技能和自我评分"></a>Android 应用开发所需的技能和自我评分</h1><blockquote>
<p>参考: App研发录</p>
</blockquote>
<h2 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h2><p>每个技能点都是五分制</p>
<ul>
<li>完全不知道:0分</li>
<li>听说过:1分</li>
<li>看过相关文章:2分</li>
<li>做过demo:3分</li>
<li>项目中使用过:4分</li>
<li>非常熟悉:5分</li>
</ul>
<table>
<thead>
<tr>
<th>技能</th>
<th>描述</th>
<th style="text-align:center">得分(4月23日)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Activity相关</td>
<td>launchModel, onSaveInstanceState, 生命周期</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td>Fragment相关</td>
<td></td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td>序列化技术</td>
<td>前者基于Service, 后者基于Bundle</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>ImageLoader原理与实现</td>
<td>Parcelable和Serialiable</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>fastJSO和GSON</td>
<td></td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td>多线程</td>
<td>Handler, Looper, ExecuteService等</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td>Adapter和RecyclerView</td>
<td></td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td>Cookie</td>
<td>登录机制, HttpRequest夹带Cookie进行身份验证</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td>网络请求封装</td>
<td>使用AsyncTask, 使用Handler+Runnable</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>Android与HTML5的交互</td>
<td>Android调用HTML5 和 HTML5调用Android</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>代码混淆</td>
<td>proGuard</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>打包机制</td>
<td>Android sdk 命令, 打包过程, Ant 或 Gradle 或 Maven</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td>线上Crash分析和修复</td>
<td>分析Crash信息修复线上 Crash</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td>内存泄漏</td>
<td>内存优化, 内存泄露, MAT</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>调试工具</td>
<td>DDMS</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td>Monkey机制</td>
<td>Monkey测试</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td>单元测试</td>
<td>JUnit</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>Git</td>
<td></td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td>插件化编程</td>
<td>DexClassLoader</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td>设计模式</td>
<td>工厂, 生成器, 适配器, 代理, 策略, 观察者, 单例等</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-应用开发所需的技能和自我评分&quot;&gt;&lt;a href=&quot;#Android-应用开发所需的技能和自我评分&quot; class=&quot;headerlink&quot; title=&quot;Android 应用开发所需的技能和自我评分&quot;&gt;&lt;/a&gt;Android 应用开发所需的技能和自我
    
    </summary>
    
      <category term="Android" scheme="https://devallever.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://devallever.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Material Design 笔记</title>
    <link href="https://devallever.github.io/2017/04/21/material-design-note/"/>
    <id>https://devallever.github.io/2017/04/21/material-design-note/</id>
    <published>2017-04-21T14:08:13.000Z</published>
    <updated>2017-04-21T14:13:12.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Toolbar的使用"><a href="#1-Toolbar的使用" class="headerlink" title="1.Toolbar的使用"></a>1.Toolbar的使用</h1><h2 id="1-1设置应用的主题为NoActionBar"><a href="#1-1设置应用的主题为NoActionBar" class="headerlink" title="1.1设置应用的主题为NoActionBar"></a>1.1设置应用的主题为NoActionBar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:theme=&quot;@style/AppTheme&quot;</div></pre></td></tr></table></figure>
<p>这个主题在sytle文件中定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</div><div class="line">&lt;!-- Customize your theme here. --&gt;</div><div class="line">	&lt;item name=&quot;colorPrimary&quot;&gt;@color/colorGreen_300&lt;/item&gt;</div><div class="line">	&lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorGreen700&lt;/item&gt;</div><div class="line">	&lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<h2 id="1-2在布局文件中使用Toolbar控件"><a href="#1-2在布局文件中使用Toolbar控件" class="headerlink" title="1.2在布局文件中使用Toolbar控件"></a>1.2在布局文件中使用Toolbar控件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v7.widget.Toolbar</div><div class="line">android:id=&quot;@+id/id_material_design_activity_toolbar&quot;</div><div class="line">android:layout_width=&quot;match_parent&quot;</div><div class="line">android:layout_height=&quot;?actionBarSize&quot;</div><div class="line">android:background=&quot;@color/colorGreen700&quot;</div><div class="line">android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</div><div class="line">app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;/&gt;</div></pre></td></tr></table></figure>
<h2 id="1-3在Activity中这样用"><a href="#1-3在Activity中这样用" class="headerlink" title="1.3在Activity中这样用"></a>1.3在Activity中这样用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Toolbar toolbar = (Toolbar)findViewById(R.id.id_material_design_activity_toolbar);</div><div class="line">setSupportActionBar(toolbar);</div></pre></td></tr></table></figure>
<h2 id="1-4设置toolbar的home图标并设置监听"><a href="#1-4设置toolbar的home图标并设置监听" class="headerlink" title="1.4设置toolbar的home图标并设置监听"></a>1.4设置toolbar的home图标并设置监听</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ActionBar actionBar = getSupportActionBar();</div><div class="line"><span class="keyword">if</span> (actionBar != <span class="keyword">null</span>)&#123;</div><div class="line">actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">actionBar.setHomeAsUpIndicator(R.mipmap.ic_arrow_back_white_36dp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在onOptionsItemSelected()方法中设置监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">case android.R.id.home:</div><div class="line">drawerLayout.openDrawer(GravityCompat.START);</div><div class="line">break;</div></pre></td></tr></table></figure></p>
<h2 id="1-5设置toolbar菜单"><a href="#1-5设置toolbar菜单" class="headerlink" title="1.5设置toolbar菜单"></a>1.5设置toolbar菜单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">		&lt;menu</div><div class="line">		    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">		    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">		    &lt;item</div><div class="line">		        android:id=&quot;@+id/id_menu_notification&quot;</div><div class="line">		        android:title=&quot;Notification&quot;</div><div class="line">		        android:icon=&quot;@mipmap/ic_notifications_active_white_24dp&quot;</div><div class="line">		        app:showAsAction=&quot;never&quot;/&gt;</div><div class="line">		    &lt;item</div><div class="line">		        android:id=&quot;@+id/id_menu_sms&quot;</div><div class="line">		        android:title=&quot;Notification&quot;</div><div class="line">		        android:icon=&quot;@mipmap/ic_sms_white_24dp&quot;</div><div class="line">		        app:showAsAction=&quot;never&quot;/&gt;</div><div class="line">		    &lt;item</div><div class="line">		        android:id=&quot;@+id/id_menu_person&quot;</div><div class="line">		        android:title=&quot;Notification&quot;</div><div class="line">		        android:icon=&quot;@mipmap/ic_person_outline_white_24dp&quot;</div><div class="line">		        app:showAsAction=&quot;never&quot;/&gt;</div><div class="line">		&lt;/menu&gt;</div></pre></td></tr></table></figure>
<pre><code>然后在Activity中加载这个菜单
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        getMenuInflater().inflate(R.menu.toolbar_menu,menu);</div><div class="line">        return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        int id = item.getItemId();</div><div class="line">        switch (id)&#123;</div><div class="line">            case R.id.id_menu_notification:</div><div class="line">                Toast.makeText(this,&quot;Notification&quot;,Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            case R.id.id_menu_sms:</div><div class="line">                Toast.makeText(this,&quot;SMS&quot;,Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            case R.id.id_menu_person:</div><div class="line">                Toast.makeText(this,&quot;Contacts&quot;,Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            case android.R.id.home:</div><div class="line">                drawerLayout.openDrawer(GravityCompat.START);</div><div class="line">                break;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h1 id="2-DrawerLayout与NavigationView的爱恨情仇"><a href="#2-DrawerLayout与NavigationView的爱恨情仇" class="headerlink" title="2.DrawerLayout与NavigationView的爱恨情仇"></a>2.DrawerLayout与NavigationView的爱恨情仇</h1><h2 id="2-1在布局中使用DrawerLayout和NavigationView"><a href="#2-1在布局中使用DrawerLayout和NavigationView" class="headerlink" title="2.1在布局中使用DrawerLayout和NavigationView"></a>2.1在布局中使用DrawerLayout和NavigationView</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">	xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;match_parent&quot;</div><div class="line">	android:id=&quot;@+id/id_material_design_activity_drawer_layout&quot;&gt;</div><div class="line">		</div><div class="line">&lt;android.support.design.widget.CoordinatorLayout</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">&lt;android.support.v7.widget.Toolbar</div><div class="line">	android:id=&quot;@+id/id_material_design_activity_toolbar&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;?actionBarSize&quot;</div><div class="line">	android:background=&quot;@color/colorGreen700&quot;</div><div class="line">	android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</div><div class="line">	app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;/&gt;</div><div class="line">		</div><div class="line">&lt;android.support.design.widget.FloatingActionButton</div><div class="line">	android:id=&quot;@+id/id_material_design_activity_fab&quot;</div><div class="line">	android:layout_width=&quot;wrap_content&quot;</div><div class="line">	android:layout_height=&quot;wrap_content&quot;</div><div class="line">	android:layout_gravity=&quot;bottom|right&quot;</div><div class="line">	android:layout_margin=&quot;16dp&quot;</div><div class="line">	android:src=&quot;@mipmap/ic_notifications_active_white_24dp&quot;</div><div class="line">	app:elevation=&quot;8dp&quot;/&gt;</div><div class="line">		</div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div><div class="line">		</div><div class="line">&lt;android.support.design.widget.NavigationView</div><div class="line">	android:id=&quot;@+id/id_material_design_navigation_view&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;match_parent&quot;</div><div class="line">	android:layout_gravity=&quot;start&quot;</div><div class="line">	app:menu=&quot;@menu/nav_menu&quot;</div><div class="line">	app:headerLayout=&quot;@layout/nav_header_layout&quot;/&gt;</div><div class="line">		        </div><div class="line">&lt;/android.support.v4.widget.DrawerLayout&gt;</div></pre></td></tr></table></figure>
<p>其中NavigationVIew包含一个menu菜单和头布局nav_menu.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">	xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</div><div class="line">		</div><div class="line">	&lt;group android:checkableBehavior=&quot;single&quot;&gt;</div><div class="line">	&lt;item</div><div class="line">	android:id=&quot;@+id/id_nav_menu_item_like&quot;</div><div class="line">	android:icon=&quot;@mipmap/ic_favorite_black_24dp&quot;</div><div class="line">	android:title=&quot;Like&quot;/&gt;</div><div class="line">	&lt;item</div><div class="line">	android:id=&quot;@+id/id_nav_menu_item_alarm&quot;</div><div class="line">	android:icon=&quot;@mipmap/ic_alarm_black_24dp&quot;</div><div class="line">	android:title=&quot;Alarm&quot;/&gt;</div><div class="line">	&lt;item</div><div class="line">	android:id=&quot;@+id/id_nav_menu_item_account&quot;</div><div class="line">	android:icon=&quot;@mipmap/ic_account_circle_black_24dp&quot;</div><div class="line">	android:title=&quot;Account&quot;/&gt;</div><div class="line">	&lt;item</div><div class="line">	android:id=&quot;@+id/id_nav_menu_item_setting&quot;</div><div class="line">	android:icon=&quot;@mipmap/ic_build_black_24dp&quot;</div><div class="line">	android:title=&quot;Setting&quot;/&gt;</div><div class="line">			</div><div class="line">	&lt;/group&gt;</div><div class="line">	&lt;/menu&gt;</div></pre></td></tr></table></figure></p>
<p>nav_header_layout<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">	&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;180dp&quot;</div><div class="line">	android:padding=&quot;10dp&quot;</div><div class="line">	android:background=&quot;@color/colorGreen700&quot;&gt;</div><div class="line">			</div><div class="line">	&lt;de.hdodenhof.circleimageview.CircleImageView</div><div class="line">	android:id=&quot;@+id/id_nav_header_iv_head&quot;</div><div class="line">	android:layout_width=&quot;70dp&quot;</div><div class="line">	android:layout_height=&quot;70dp&quot;</div><div class="line">	android:src=&quot;@mipmap/h_01&quot;</div><div class="line">	android:layout_centerInParent=&quot;true&quot;/&gt;</div><div class="line">		</div><div class="line">&lt;TextView</div><div class="line">	android:id=&quot;@+id/id_nav_header_tv_email&quot;</div><div class="line">	android:layout_width=&quot;wrap_content&quot;</div><div class="line">	android:layout_height=&quot;wrap_content&quot;</div><div class="line">	android:text=&quot;devallever@163.com&quot;</div><div class="line">	android:textColor=&quot;@color/white&quot;</div><div class="line">	android:layout_alignParentBottom=&quot;true&quot;/&gt;</div><div class="line">			</div><div class="line">&lt;TextView</div><div class="line">	android:id=&quot;@+id/id_nav_header_tv_username&quot;</div><div class="line">	android:layout_width=&quot;wrap_content&quot;</div><div class="line">	android:layout_height=&quot;wrap_content&quot;</div><div class="line">	android:layout_marginBottom=&quot;5dp&quot;</div><div class="line">	android:text=&quot;Devallever&quot;</div><div class="line">	android:textColor=&quot;@color/white&quot;</div><div class="line">	android:layout_above=&quot;@id/id_nav_header_tv_email&quot;/&gt;</div><div class="line">			</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>
<h2 id="2-2设置NavigationView的菜单监听"><a href="#2-2设置NavigationView的菜单监听" class="headerlink" title="2.2设置NavigationView的菜单监听"></a>2.2设置NavigationView的菜单监听</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">navigationView = (NavigationView)findViewById(R.id.id_material_design_navigation_view);</div><div class="line">navigationView.setCheckedItem(R.id.id_nav_menu_item_like);</div><div class="line">navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">	@Override</div><div class="line">	public boolean onNavigationItemSelected(@NonNull MenuItem item) &#123;</div><div class="line">	int id = item.getItemId();</div><div class="line">	switch (id)&#123;</div><div class="line">		case R.id.id_nav_menu_item_like:</div><div class="line">			Toast.makeText(MaterialDesignActivity.this, &quot;Like&quot;,Toast.LENGTH_SHORT).show();</div><div class="line">			break;</div><div class="line">		case R.id.id_nav_menu_item_account:</div><div class="line">			Toast.makeText(MaterialDesignActivity.this, &quot;Account&quot;,Toast.LENGTH_SHORT).show();</div><div class="line">			break;</div><div class="line">		case R.id.id_nav_menu_item_alarm:</div><div class="line">			Toast.makeText(MaterialDesignActivity.this, &quot;Alarm&quot;,Toast.LENGTH_SHORT).show();</div><div class="line">			break;</div><div class="line">		case R.id.id_nav_menu_item_setting:</div><div class="line">			Toast.makeText(MaterialDesignActivity.this, &quot;Setting&quot;,Toast.LENGTH_SHORT).show();</div><div class="line">			break;</div><div class="line">	&#125;</div><div class="line">	return true;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="2-3把toolbar与NavigationView关联起来，并实现home的动画效果"><a href="#2-3把toolbar与NavigationView关联起来，并实现home的动画效果" class="headerlink" title="2.3把toolbar与NavigationView关联起来，并实现home的动画效果"></a>2.3把toolbar与NavigationView关联起来，并实现home的动画效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ActionBarDrawerToggle actionBarDrawerToggle = </div><div class="line">new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.app_name, R.string.app_name);</div><div class="line">actionBarDrawerToggle.syncState();</div></pre></td></tr></table></figure>
<h1 id="3FloatActionButton"><a href="#3FloatActionButton" class="headerlink" title="3FloatActionButton"></a>3FloatActionButton</h1><h2 id="3-1在布局中使用FloatActionButton控件"><a href="#3-1在布局中使用FloatActionButton控件" class="headerlink" title="3.1在布局中使用FloatActionButton控件"></a>3.1在布局中使用FloatActionButton控件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.FloatingActionButton</div><div class="line">	android:id=&quot;@+id/id_material_design_activity_fab&quot;</div><div class="line">	android:layout_width=&quot;wrap_content&quot;</div><div class="line">	android:layout_height=&quot;wrap_content&quot;	</div><div class="line">	android:layout_gravity=&quot;bottom|right&quot;</div><div class="line">	android:layout_margin=&quot;16dp&quot;</div><div class="line">	android:src=&quot;@mipmap/ic_notifications_active_white_24dp&quot;</div><div class="line">	app:elevation=&quot;8dp&quot;/&gt;</div></pre></td></tr></table></figure>
<h2 id="3-2设置监听，和一般的按钮设置监听是一样的"><a href="#3-2设置监听，和一般的按钮设置监听是一样的" class="headerlink" title="3.2设置监听，和一般的按钮设置监听是一样的"></a>3.2设置监听，和一般的按钮设置监听是一样的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fab.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">	@Override</div><div class="line">	public void onClick(View v) &#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="4Snackbar"><a href="#4Snackbar" class="headerlink" title="4Snackbar"></a>4Snackbar</h1><p>当点击按钮时候弹出Snackbar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">fab.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">	@Override</div><div class="line">	public void onClick(View v) &#123;</div><div class="line">		Snackbar.make(v, &quot;Remind!&quot;, Snackbar.LENGTH_INDEFINITE)</div><div class="line">			.setAction(&quot;I know.&quot;, new View.OnClickListener() &#123;</div><div class="line">				@Override</div><div class="line">				public void onClick(View v) &#123;</div><div class="line">					Toast.makeText(MaterialDesignActivity.this,&quot;OK&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">			.show();</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="5CoordinatorLayout"><a href="#5CoordinatorLayout" class="headerlink" title="5CoordinatorLayout"></a>5CoordinatorLayout</h1><p>加强版的FrameLayout<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.CoordinatorLayout</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">&lt;android.support.v7.widget.Toolbar</div><div class="line">	android:id=&quot;@+id/id_material_design_activity_toolbar&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;?actionBarSize&quot;</div><div class="line">	android:background=&quot;@color/colorGreen700&quot;</div><div class="line">	android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</div><div class="line">	app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;/&gt;</div><div class="line">	</div><div class="line">&lt;android.support.design.widget.FloatingActionButton</div><div class="line">	android:id=&quot;@+id/id_material_design_activity_fab&quot;</div><div class="line">	android:layout_width=&quot;wrap_content&quot;</div><div class="line">	android:layout_height=&quot;wrap_content&quot;</div><div class="line">	android:layout_gravity=&quot;bottom|right&quot;</div><div class="line">	android:layout_margin=&quot;16dp&quot;</div><div class="line">	android:src=&quot;@mipmap/ic_notifications_active_white_24dp&quot;</div><div class="line">	app:elevation=&quot;8dp&quot;/&gt;</div><div class="line">	</div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Toolbar的使用&quot;&gt;&lt;a href=&quot;#1-Toolbar的使用&quot; class=&quot;headerlink&quot; title=&quot;1.Toolbar的使用&quot;&gt;&lt;/a&gt;1.Toolbar的使用&lt;/h1&gt;&lt;h2 id=&quot;1-1设置应用的主题为NoActionBar&quot;&gt;&lt;
    
    </summary>
    
      <category term="Android" scheme="https://devallever.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://devallever.github.io/tags/Android/"/>
    
      <category term="Material Design" scheme="https://devallever.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 教程</title>
    <link href="https://devallever.github.io/2017/04/21/markdown-learn/"/>
    <id>https://devallever.github.io/2017/04/21/markdown-learn/</id>
    <published>2017-04-21T08:32:17.000Z</published>
    <updated>2017-04-21T09:20:44.418Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.zybuluo.com/mdeditor" title="作业部落旗下 Cmd 在线 Markdown 编辑阅读器" target="_blank" rel="external">『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档』</a></p>
<blockquote>
<p><a href="https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown" target="_blank" rel="external">原文地址</a></p>
</blockquote>
<h1 id="Cmd-Markdown-简明语法手册"><a href="#Cmd-Markdown-简明语法手册" class="headerlink" title="Cmd Markdown 简明语法手册"></a>Cmd Markdown 简明语法手册</h1><p>标签： Cmd-Markdown</p>
<hr>
<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 <em> 和 *</em> 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">这是一个一级标题</div><div class="line">============================</div><div class="line"></div><div class="line">这是一个二级标题</div><div class="line">--------------------------------------------------</div><div class="line"></div><div class="line">### 这是一个三级标题</div></pre></td></tr></table></figure>
<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="http://ghosertblog.github.com" target="_blank" rel="external">本人博客</a> 的链接。</p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像" title="">
                </div>
                <div class="image-caption">我的头像</div>
            </figure>
<h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install vim-gnome</div></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''A docstring'''</span></div><div class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></div><div class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></div><div class="line"><span class="meta">... </span>prompt'''</div></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* nth element in the fibonacci series.</div><div class="line">* @param n &gt;= 0</div><div class="line">* @return the nth element, &gt;= 0.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> tmp;</div><div class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</div><div class="line">    tmp = a;</div><div class="line">    a += b;</div><div class="line">    b = tmp;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</div></pre></td></tr></table></figure>
<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start:&gt;https://www.zybuluo.com</div><div class="line">io=&gt;inputoutput: verification</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">sub=&gt;subroutine: Your Subroutine</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;io-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;sub-&gt;io</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Title: Here is a title</div><div class="line">A-&gt;B: Normal line</div><div class="line">B--&gt;C: Dashed line</div><div class="line">C-&gt;&gt;D: Open arrow</div><div class="line">D--&gt;&gt;A: Dashed open arrow</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">title 项目开发流程</div><div class="line">section 项目确定</div><div class="line">    需求分析       :a1, 2016-06-22, 3d</div><div class="line">    可行性报告     :after a1, 5d</div><div class="line">    概念验证       : 5d</div><div class="line">section 项目实施</div><div class="line">    概要设计      :2016-07-05  , 5d</div><div class="line">    详细设计      :2016-07-08, 10d</div><div class="line">    编码          :2016-07-15, 10d</div><div class="line">    测试          :2016-07-22, 5d</div><div class="line">section 发布验收</div><div class="line">    发布: 2d</div><div class="line">    验收: 3d</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="external">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</div><div class="line">B --&gt; C&#123;Decision&#125;</div><div class="line">C --&gt;|One| D[Result one]</div><div class="line">C --&gt;|Two| E[Result two]</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="external">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;John: Hello John, how are you?</div><div class="line">loop every minute</div><div class="line">    John--&gt;Alice: Great!</div><div class="line">end</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="external">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><p>名词 1<br>:   定义 1（左侧有一个可见的冒号和四个不可见的空格）</p>
<p>代码块 2<br>:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p>
<pre><code>代码块（左侧有八个不可见的空格）
</code></pre><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre><table><br>    <tr><br>        <th rowspan="2">值班人员</th><br>        <th>星期一</th><br>        <th>星期二</th><br>        <th>星期三</th><br>    </tr><br>    <tr><br>        <td>李强</td><br>        <td>张明</td><br>        <td>王平</td><br>    </tr><br></table>

<h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;
</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;
</code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="external">font-awesome</a> 官方网站。</p>
<h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
</code></pre><p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li>[ ] <strong>Cmd Markdown 开发</strong><ul>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[x] 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="external">语法参考</a></li>
<li>[x] 改进 LaTex 功能<ul>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="external">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li>[ ] <strong>七月旅行准备</strong><ul>
<li>[ ] 准备邮轮上需要携带的物品</li>
<li>[ ] 浏览日本免税店的物品</li>
<li>[x] 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.zybuluo.com/mdeditor&quot; title=&quot;作业部落旗下 Cmd 在线 Markdown 编辑阅读器&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档
    
    </summary>
    
      <category term="Markdown" scheme="https://devallever.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://devallever.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Java连接数据库</title>
    <link href="https://devallever.github.io/2017/04/21/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://devallever.github.io/2017/04/21/Java连接数据库/</id>
    <published>2017-04-21T05:49:27.000Z</published>
    <updated>2017-04-21T09:20:14.465Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.bing.com/az/hprichbg/rb/SolarFarm_ZH-CN4853771923_1366x768.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>MySQL provides standards-based drivers for JDBC, ODBC, and .Net enabling developers to build database applications in their language of choice. In addition, a native C library allows developers to embed MySQL directly into their applications.</p>
</blockquote>
<hr>
<h3 id="1-下载相关的驱动程序"><a href="#1-下载相关的驱动程序" class="headerlink" title="1.下载相关的驱动程序"></a>1.下载相关的驱动程序</h3><p>如 Java与MySQL的连接,可到MySQL官网上下载<br><a href="https://www.mysql.com/products/connector/" target="_blank" rel="external">下载地址</a></p>
<h3 id="2-数据库的URL格式"><a href="#2-数据库的URL格式" class="headerlink" title="2.数据库的URL格式"></a>2.数据库的URL格式</h3><p>如: jdbc:mysql://127.0.0.1/dbname<br>在连接数据库时,我们必须使用各种与数据库类型相关的参数,例如主机名,端口号和数据库名<br>jdbc的一般语法:jdbc:subprotocol:other stuff</p>
<ul>
<li><em>subprotocol:连接数据库的具体驱动程序</em></li>
<li><em>other stuff:随subprotocol的不同而不同,应查阅供应商的相关文档</em></li>
</ul>
<h3 id="3-注册驱动器类"><a href="#3-注册驱动器类" class="headerlink" title="3.注册驱动器类"></a>3.注册驱动器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div></pre></td></tr></table></figure>
<p>字符串的内容为驱动器类所在包的全路径<br>这条语句使得驱动器类被加载,由此将执行可以注册驱动器的静态初始化器</p>
<h3 id="4-连接到数据库"><a href="#4-连接到数据库" class="headerlink" title="4.连接到数据库"></a>4.连接到数据库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connection conn = DriverManager.getConnection(sqlUrl, username, password);</div></pre></td></tr></table></figure>
<p>以上三个参数类型都是字符串类型, 连接成功会返回Connection对象,用它去执行SQL语句.</p>
<h3 id="5-操作数据库"><a href="#5-操作数据库" class="headerlink" title="5.操作数据库"></a>5.操作数据库</h3><h4 id="5-1-基本方法"><a href="#5-1-基本方法" class="headerlink" title="5.1 基本方法"></a>5.1 基本方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"select nickname, phone from tuser where username='xm'"</span>;</div></pre></td></tr></table></figure>
<p>执行sql命令首先创建Statement对象或其子类PreparedStatement对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">statement = conn.createStatement();</div><div class="line">preparedStatement = conn.preparedStatement(sql);</div><div class="line">ResultSet resultSet = statement.executeQuery(sql);</div><div class="line">或</div><div class="line">resultSet = preparedStatement.executeQuery();</div></pre></td></tr></table></figure></p>
<p>executeQuery()方法可以执行select 语句, executeUpdate()方法可以执行insert, update和delete之类的操作. 也可以执行create table 和drop table之类的数据定义语句. execute()方法可以执行任意的sql语句.</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
    
    </summary>
    
      <category term="Java" scheme="https://devallever.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://devallever.github.io/tags/java/"/>
    
      <category term="sql" scheme="https://devallever.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Hello Android</title>
    <link href="https://devallever.github.io/2017/04/17/helloAndroid/"/>
    <id>https://devallever.github.io/2017/04/17/helloAndroid/</id>
    <published>2017-04-17T14:56:05.454Z</published>
    <updated>2017-04-17T14:56:05.438Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://devallever.github.io/2017/04/17/hello-world/"/>
    <id>https://devallever.github.io/2017/04/17/hello-world/</id>
    <published>2017-04-17T08:48:22.843Z</published>
    <updated>2017-04-17T08:48:22.843Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
