{"meta":{"title":"Allever Blog","subtitle":"Android Developer","description":"Android Developer","author":"Allever","url":"https://devallever.github.io"},"pages":[{"title":"","date":"2017-04-21T08:41:34.775Z","updated":"2017-04-21T08:41:34.775Z","comments":false,"path":"tags/index.html","permalink":"https://devallever.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2017-04-21T08:42:35.918Z","updated":"2017-04-21T08:42:35.918Z","comments":false,"path":"categories/index.html","permalink":"https://devallever.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Android练手项目 极简天气","slug":"myCoolWeather","date":"2017-04-26T04:07:24.000Z","updated":"2017-04-26T10:21:39.378Z","comments":true,"path":"2017/04/26/myCoolWeather/","link":"","permalink":"https://devallever.github.io/2017/04/26/myCoolWeather/","excerpt":"","text":"项目地址: https://github.com/devallever/MyCoolWeather我的博客: https://devallever.github.io/ 简介极简天气, 天气应用,是我看完Android第一行代码后, 参考并修改的练习项目, 以巩固所学知识 感谢开源 OkHttp Retrofit Glide RxJava/RxAndroid LitePal EventBus 感谢郭神提供天气数据接口 功能第一版 显示实时天气, 三天预报, 空气质量, 温馨提示 获取Bing每日图片 滑动切换城市 城市管理: 增加,删除 下拉刷新 缓存省市县, 天气信息 第二版(还没开始着手呢) 后台自动刷新 自动下载壁纸 刷新天气随机更换壁纸 天气提醒 查看历史天气 功能实现细节第一版功能细节选择城市 ChooseCItyActivity界面如下首先访问数据库中是否有所有省份数据,有则获取,没有则请求服务器,然后得到全国省份的json数据,保存到数据库中12345678910111213141516private void queryProvince()&#123; toolbar.setTitle(&quot;中国&quot;); provinceList = DataSupport.findAll(Province.class); if (provinceList.size() &gt; 0)&#123; dataList.clear(); for (Province province:provinceList)&#123; dataList.add(province.getProvinceName()); &#125; adapter.notifyDataSetChanged(); listView.setSelection(0); currentLevel = LEVEL_PROVINCE; &#125;else &#123; String address = &quot;http://guolin.tech/api/china/&quot;; queryFromServer(address, &quot;province&quot;); &#125;&#125; 123456789101112131415161718public static boolean handleProvinceResponse(String response)&#123; if (!TextUtils.isEmpty(response))&#123; try &#123; JSONArray allProvince = new JSONArray(response); for (int i = 0; i&lt;allProvince.length(); i++)&#123; JSONObject provinceObject = allProvince.getJSONObject(i); Province province = new Province(); province.setProvinceCode(provinceObject.getInt(&quot;id&quot;)); province.setProvinceName(provinceObject.getString(&quot;name&quot;)); province.save(); &#125; return true; &#125;catch (JSONException je)&#123; je.printStackTrace(); &#125; &#125; return false;&#125; 然后解析json数据,设置到Listview中,点击时记录省份id, 然后根据这个id访问数据库中是否有该省份的城市信息,有则获取,没有则请求服务器,然后得到该省份所有城市的json数据,保存到数据库中 1234567891011121314151617private void queryCity()&#123; toolbar.setTitle(selectedProvince.getProvinceName()); cityList = DataSupport.where(&quot;provinceCode = ? &quot;, String.valueOf(selectedProvince.getProvinceCode())).find(City.class); if (cityList.size() &gt; 0)&#123; dataList.clear(); for (City city: cityList)&#123; dataList.add(city.getCityName()); &#125; adapter.notifyDataSetChanged(); listView.setSelection(0); currentLevel = LEVEL_CITY; &#125;else &#123; int provinceCode = selectedProvince.getProvinceCode(); String address = &quot;http://guolin.tech/api/china/&quot; + provinceCode; queryFromServer(address,&quot;city&quot;); &#125;&#125; 1234567891011121314151617181920public static boolean handleCityResponse(String response, int provinceCode)&#123; if (!TextUtils.isEmpty(response))&#123; try &#123; Log.d(TAG, &quot;handleCityResponse: \\n response = &quot; + response); JSONArray allCity = new JSONArray(response); for (int i = 0; i&lt; allCity.length(); i++)&#123; JSONObject cityObject = allCity.getJSONObject(i); City city = new City(); city.setCityCode(cityObject.getInt(&quot;id&quot;)); city.setCityName(cityObject.getString(&quot;name&quot;)); city.setProvinceCode(provinceCode); city.save(); &#125; return true; &#125;catch (JSONException je)&#123; je.printStackTrace(); &#125; &#125; return false;&#125; 然后解析json数据,清空listview数据源, 然后加载该省的所有城市数据,设置到ListView中,点击时记录该市的id, 然后根据这个id访问数据库中是否存在该市的所有县数据,有则获取, 没有则请求服务器,然后得到该市所有县的json数据,保存到数据库中 1234567891011121314151617181920private void queryCounty()&#123; toolbar.setTitle(selectedCity.getCityName()); Toast.makeText(this,&quot;cityCode = &quot;+ selectedCity.getCityCode() + &quot;\\n&quot; + &quot;id = &quot; + selectedCity.getId(),Toast.LENGTH_LONG ).show(); countyList = DataSupport.where(&quot;cityCode = ?&quot;, String.valueOf(selectedCity.getId())).find(County.class); if (countyList.size() &gt; 0 )&#123; dataList.clear(); for (County county: countyList)&#123; dataList.add(county.getCountyName()); &#125; adapter.notifyDataSetChanged(); listView.setSelection(0); currentLevel = LEVEL_COUNTY; &#125;else &#123; int provinceCode = selectedProvince.getProvinceCode(); int cityCode = selectedCity.getCityCode(); String address = &quot;http://guolin.tech/api/china/&quot; + provinceCode + &quot;/&quot; + cityCode; queryFromServer(address,&quot;county&quot;); &#125;&#125; 123456789101112131415161718192021public static boolean handleCountyResponse(String response, int cityCode)&#123; if (!TextUtils.isEmpty(response)) &#123; try &#123; JSONArray allCounty = new JSONArray(response); for (int i = 0; i &lt; allCounty.length(); i++) &#123; JSONObject countyObject = allCounty.getJSONObject(i); County county = new County(); county.setCountyName(countyObject.getString(&quot;name&quot;)); county.setWeatherId(countyObject.getString(&quot;weather_id&quot;)); county.setCityCode(cityCode); boolean successed = county.save(); if (successed) Log.d(TAG, &quot;handleCountyResponse: save success&quot;); else Log.d(TAG, &quot;handleCountyResponse: save fail&quot;); &#125; return true; &#125; catch (JSONException je) &#123; je.printStackTrace(); &#125; &#125; return false;&#125; 选择其中某一项, 获取weatherId和县名称countyName, 通过setResult返回父Activity中,在父Activity中onActivityResult方法中, 把weatherId和countyName保存到Weather数据表中, 然后重新获取weather表中数据. 1234567891011121314151617181920212223242526listView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123; @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123; if (currentLevel == LEVEL_PROVINCE)&#123; selectedProvince = provinceList.get(position); queryCity(); &#125;else if (currentLevel == LEVEL_CITY)&#123; selectedCity = cityList.get(position); Toast.makeText(ChooseCityActivity.this,&quot;id = &quot; + selectedCity.getId() + &quot;\\n&quot;+ &quot;cityName = &quot; + selectedCity.getCityName() + &quot;\\n&quot; + &quot;cityCode = &quot; + selectedCity.getCityCode() + &quot;\\n&quot; + &quot;provinceCode = &quot; + selectedCity.getProvinceCode(),Toast.LENGTH_SHORT).show(); queryCounty(); &#125;else if (currentLevel == LEVEL_COUNTY)&#123; selectedCounty = countyList.get(position); Toast.makeText(ChooseCityActivity.this,&quot;id = &quot; + selectedCounty.getId() + &quot;\\n&quot;+ &quot;countyName = &quot; + selectedCounty.getCountyName() + &quot;\\n&quot; + &quot;weather_id = &quot; + selectedCounty.getWeatherId(),Toast.LENGTH_SHORT).show(); Intent intent = new Intent(); intent.putExtra(&quot;weather_id&quot;, selectedCounty.getWeatherId()); intent.putExtra(&quot;county_name&quot;,selectedCounty.getCountyName()); setResult(RESULT_OK,intent); finish(); &#125; &#125;&#125;); 回到父Activity进行操作12345678910111213String weather_id = data.getStringExtra(&quot;weather_id&quot;);List&lt;Weather&gt; weatherList = DataSupport.where(&quot;weatherId = ? &quot;, weather_id).find(Weather.class);if (weatherList != null &amp;&amp; weatherList.size()==0)&#123; Weather weather = new Weather(); weather.setCountyName(data.getStringExtra(&quot;county_name&quot;)); weather.setWeatherId(data.getStringExtra(&quot;weather_id&quot;)); weather.setIsShow(&quot;1&quot;); weather.save(); titleList.add(weather.getCountyName()); WeatherFragment weatherFragment = new WeatherFragment(weather.getWeatherId()); weatherFragmentList.add(weatherFragment); weatherPageAdapter.notifyDataSetChanged();&#125; 构造ViewPager天气页面数据源在MainActivity中,访问数据库weather表, (条件:isShow=1,表示显示是否显示在主界面), 把查询结果存到List中,如果list大小为0, 则打开选择城市界面,如果存在数据,则遍历每个weather对象,创建WeatherFragment,并把weather对象中的weatherId传到Fragment的构造方法中,并添加到fragmengList中, WeatherFragment会根据这个weatherId获取天气信息,同时把weather的countyName添加到titleLists中用于设置每个pager的标题,,,然后通知adapter数据更新了,pagerAdapter是通过fragmengList和titleList绑定数据的 123456789101112131415161718private void showWeather()&#123; weatherList.clear(); weatherFragmentList.clear(); titleList.clear(); weatherList = DataSupport.where(&quot;isShow=?&quot;, &quot;1&quot;).find(Weather.class); if (weatherList.size() ==0)&#123; //转到选择城市Activity Intent intent = new Intent(this, ChooseCityActivity.class); startActivityForResult(intent, REQUEST_CODE_CHOOSE_CITY); &#125;else &#123; for (Weather weather: weatherList) &#123; titleList.add(weather.getCountyName()); WeatherFragment weatherFragment = new WeatherFragment(weather.getWeatherId()); weatherFragmentList.add(weatherFragment); &#125; weatherPageAdapter.notifyDataSetChanged(); &#125;&#125; 选择城市后返回的操作12345678910111213String weather_id = data.getStringExtra(&quot;weather_id&quot;);List&lt;Weather&gt; weatherList = DataSupport.where(&quot;weatherId = ? &quot;, weather_id).find(Weather.class);if (weatherList != null &amp;&amp; weatherList.size()==0)&#123; Weather weather = new Weather(); weather.setCountyName(data.getStringExtra(&quot;county_name&quot;)); weather.setWeatherId(data.getStringExtra(&quot;weather_id&quot;)); weather.setIsShow(&quot;1&quot;); weather.save(); titleList.add(weather.getCountyName()); WeatherFragment weatherFragment = new WeatherFragment(weather.getWeatherId()); weatherFragmentList.add(weatherFragment); weatherPageAdapter.notifyDataSetChanged();&#125; 城市管理-CityManageActivity该页面有一个RecyclerView,和一个FloatingActionButton, 其中recyclerView的item是一个CardView, 显示了该城市粗略的天气信息,如温度和天气,fab用于添加城市,可以通过左右滑动每一个卡片来删除数据,请求数据库, 访问weather表的所有数据, 抽取其中所需的信息封装到CityItem中,然后添加到cityItemList中,作为RecyclerView的数据源,当成功选择一个城市并返回后,根据返回的weatherId访问数据库是否存在该数据,有则不操作,没有则添加到weather表中.以免产生冗余数据.当滑动删除城市后,会从数据表中删除掉这条记录,(改进的做法是滑动删除后显示一个Snackbar来确认操作)12345678910111213141516weatherList = DataSupport.findAll(Weather.class);Gson gson = new Gson();Root root;for (Weather weather: weatherList)&#123; CityItem cityItem = new CityItem(); cityItem.setIsShow(weather.getIsShow()); root = gson.fromJson(weather.getWeatherInfo(),Root.class); if (root!=null)&#123; cityItem.setTmp(root.getHeWeather5().get(0).getNow().getTmp()); cityItem.setWeather(root.getHeWeather5().get(0).getNow().getCond().getTxt()); cityItem.setCounty(weather.getCountyName()); cityItem.setWeatherId(weather.getWeatherId()); cityItemList.add(cityItem); &#125;&#125;cityRecyclerAdapter.notifyDataSetChanged(); 滑动删除后的操作-我还在进一步研究,不是很懂,因为是复制别人的代码关联1234//关联ItemTouchHelper和RecyclerViewItemTouchHelper.Callback callback = new ItemTouchHelperCallback(cityRecyclerAdapter);ItemTouchHelper mItemTouchHelper = new ItemTouchHelper(callback);mItemTouchHelper.attachToRecyclerView(recyclerView); ItemTouchHelperCallback:1234567891011121314151617181920212223242526272829303132333435363738394041public class ItemTouchHelperCallback extends ItemTouchHelper.Callback &#123; private OnMoveAndSwipedListener moveAndSwipedListener; public ItemTouchHelperCallback(OnMoveAndSwipedListener listener) &#123; this.moveAndSwipedListener = listener; &#125; //设置拖动方向以及侧滑方向 @Override public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) &#123; if (recyclerView.getLayoutManager() instanceof LinearLayoutManager) &#123; //单列的RecyclerView支持上下拖动和左右侧滑 final int dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN; final int swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END; return makeMovementFlags(dragFlags, swipeFlags); &#125; else &#123; //多列的RecyclerView支持上下左右拖动和不支持左右侧滑 final int dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN | ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT; final int swipeFlags = 0; return makeMovementFlags(dragFlags, swipeFlags); &#125; &#125; //拖动item时会调用此方法 @Override public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) &#123; //如果两个item不是同一个类型的，不让他拖拽 if (viewHolder.getItemViewType() != target.getItemViewType()) &#123; return false; &#125; moveAndSwipedListener.onItemMove(viewHolder.getAdapterPosition(), target.getAdapterPosition()); return true; &#125; //侧滑item时会调用此方法 @Override public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) &#123; moveAndSwipedListener.onItemDismiss(viewHolder.getAdapterPosition()); &#125;&#125; 显示天气-WeatherFragmeng显示天气信息是在WeatherFragment中完成的, 也就是每个页面. 从构造方法中获取到该所显示城市的天气数据, 根据这个weatherId访问数据库中该weatherId所在记录是否有weatherInfo信息,如果有则获取该天气信息的json数据, 没有则向服务器请求数据,获取天气信息,成功获取信息之后保存到数据库中. 12345678weatherList = DataSupport.where(\"weatherId = ? \", weather_id).find(Weather.class);if (weatherList != null &amp;&amp; weatherList.size()&gt;0)&#123; if (TextUtils.isEmpty(weatherList.get(0).getWeatherInfo())) sendWeatherInfoRequest(); else handleWeatherInfoResponse(weatherList.get(0).getWeatherInfo());&#125;else &#123; //get dada from internet sendWeatherInfoRequest();&#125; 获取后保存到数据库12345678910String responseText = response.body().string();Weather weather = new Weather();weather.setWeatherInfo(responseText);weather.updateAll(\"weatherId=?\", weather_id);getActivity().runOnUiThread(new Runnable() &#123; @Override public void run() &#123; handleWeatherInfoResponse(responseText); &#125;&#125;); OnMoveAndSwipedListener:1234567public interface OnMoveAndSwipedListener &#123; boolean onItemMove(int fromPosition, int toPosition); void onItemDismiss(int position);&#125; 监听到滑动删除执行以下方法123456789101112@Overridepublic boolean onItemMove(int fromPosition, int toPosition) &#123; notifyItemMoved(fromPosition, toPosition); return true;&#125;@Overridepublic void onItemDismiss(int position) &#123; DataSupport.deleteAll(Weather.class,&quot;weatherId=?&quot;,cityItemList.get(position).getWeatherId()); cityItemList.remove(position); notifyItemRemoved(position);&#125; 第二版功能细节 持续更新……..欢迎大家共同学习共同成长…..","categories":[{"name":"Android","slug":"Android","permalink":"https://devallever.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://devallever.github.io/tags/Android/"},{"name":"Project","slug":"Project","permalink":"https://devallever.github.io/tags/Project/"}]},{"title":"滚动屏幕自动隐藏FloatingActionButton","slug":"fab-auto-hideshow","date":"2017-04-24T01:56:01.000Z","updated":"2017-04-24T03:50:43.817Z","comments":true,"path":"2017/04/24/fab-auto-hideshow/","link":"","permalink":"https://devallever.github.io/2017/04/24/fab-auto-hideshow/","excerpt":"","text":"概述FloatingActionButton可以说是Material Design 的标志之一了，但是却有很多人并不是很喜欢它，其中一条主要的原因就是FAB的存在挡住了要显示的内容，从而影响体验。本文主要介绍对FAB两方面的优化，一方面是点击FAB弹出子菜单的特效，一方面是在滑动时自动隐藏FAB。最终的实现 原理 它的显示与隐藏是根据AppBarLayout的Y值来决定的，我们知道如果按照最上面的方式定义主界面布局，列表滚动的时候toolbar会显示和隐藏，而toolbar是AppBarLayout的一部分，因此可以让Behavior依赖于AppBarLayout，当AppBarLayout变化的时候会调用onDependentViewChanged，然后在这里获取AppBarLayout的高度移动的距离，然后根据这个距离来判定FloatingActionButton上下移动的距离，从而实现了FloatingActionButton的显示和隐藏。这个实现方式我是在这里找到的： http://stackoverflow.com/questions/31457099/android-fab-to-hide-when-navigating-between-different-fragments-in-a-viewpager 实现代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374public class FABVerticalBehavior extends FloatingActionButton.Behavior &#123; private static final Interpolator INTERPOLATOR = new FastOutSlowInInterpolator(); private boolean mIsAnimatingOut = false; public FABVerticalBehavior(Context context, AttributeSet attrs) &#123; super(); &#125; @Override public boolean onStartNestedScroll(final CoordinatorLayout coordinatorLayout, final FloatingActionButton child, final View directTargetChild, final View target, final int nestedScrollAxes) &#123; // Ensure we react to vertical scrolling return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL || super.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes); &#125; @Override public void onNestedScroll(final CoordinatorLayout coordinatorLayout, final FloatingActionButton child, final View target, final int dxConsumed, final int dyConsumed, final int dxUnconsumed, final int dyUnconsumed) &#123; super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed); if (dyConsumed &gt; 0 &amp;&amp; !this.mIsAnimatingOut &amp;&amp; child.getVisibility() == View.VISIBLE) &#123; // User scrolled down and the FAB is currently visible -&gt; hide the FAB animateOut(child); &#125; else if (dyConsumed &lt; 0 &amp;&amp; child.getVisibility() != View.VISIBLE) &#123; // User scrolled up and the FAB is currently not visible -&gt; show the FAB animateIn(child); &#125; &#125; // Same animation that FloatingActionButton.Behavior uses to hide the FAB when the AppBarLayout exits private void animateOut(final FloatingActionButton button) &#123; if (Build.VERSION.SDK_INT &gt;= 14) &#123; ViewCompat.animate(button).translationY(button.getHeight() + getMarginBottom(button)).setInterpolator(INTERPOLATOR).withLayer() .setListener(new ViewPropertyAnimatorListener() &#123; public void onAnimationStart(View view) &#123; FABVerticalBehavior.this.mIsAnimatingOut = true; &#125; public void onAnimationCancel(View view) &#123; FABVerticalBehavior.this.mIsAnimatingOut = false; &#125; public void onAnimationEnd(View view) &#123; FABVerticalBehavior.this.mIsAnimatingOut = false; view.setVisibility(View.GONE); &#125; &#125;).start(); &#125; else &#123; &#125; &#125; // Same animation that FloatingActionButton.Behavior uses to show the FAB when the AppBarLayout enters private void animateIn(FloatingActionButton button) &#123; button.setVisibility(View.VISIBLE); if (Build.VERSION.SDK_INT &gt;= 14) &#123; ViewCompat.animate(button).translationY(0) .setInterpolator(INTERPOLATOR).withLayer().setListener(null) .start(); &#125; else &#123; &#125; &#125; private int getMarginBottom(View v) &#123; int marginBottom = 0; final ViewGroup.LayoutParams layoutParams = v.getLayoutParams(); if (layoutParams instanceof ViewGroup.MarginLayoutParams) &#123; marginBottom = ((ViewGroup.MarginLayoutParams) layoutParams).bottomMargin; &#125; return marginBottom; &#125;&#125; 注意 在25.0.1以上版本的design包中，会有隐藏后不显示的Bug 参考这里","categories":[{"name":"Android","slug":"Android","permalink":"https://devallever.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://devallever.github.io/tags/Android/"}]},{"title":"Android 应用开发所需的技能和自我评分","slug":"android-developer-base-skill-20","date":"2017-04-23T02:22:57.000Z","updated":"2017-04-23T02:57:07.828Z","comments":true,"path":"2017/04/23/android-developer-base-skill-20/","link":"","permalink":"https://devallever.github.io/2017/04/23/android-developer-base-skill-20/","excerpt":"","text":"Android 应用开发所需的技能和自我评分 参考: App研发录 评分标准每个技能点都是五分制 完全不知道:0分 听说过:1分 看过相关文章:2分 做过demo:3分 项目中使用过:4分 非常熟悉:5分 技能 描述 得分(4月23日) Activity相关 launchModel, onSaveInstanceState, 生命周期 3 Fragment相关 3 序列化技术 前者基于Service, 后者基于Bundle 1 ImageLoader原理与实现 Parcelable和Serialiable 1 fastJSO和GSON 4 多线程 Handler, Looper, ExecuteService等 3 Adapter和RecyclerView 3 Cookie 登录机制, HttpRequest夹带Cookie进行身份验证 3 网络请求封装 使用AsyncTask, 使用Handler+Runnable 1 Android与HTML5的交互 Android调用HTML5 和 HTML5调用Android 1 代码混淆 proGuard 1 打包机制 Android sdk 命令, 打包过程, Ant 或 Gradle 或 Maven 0 线上Crash分析和修复 分析Crash信息修复线上 Crash 0 内存泄漏 内存优化, 内存泄露, MAT 1 调试工具 DDMS 2 Monkey机制 Monkey测试 0 单元测试 JUnit 1 Git 2 插件化编程 DexClassLoader 0 设计模式 工厂, 生成器, 适配器, 代理, 策略, 观察者, 单例等 2","categories":[{"name":"Android","slug":"Android","permalink":"https://devallever.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://devallever.github.io/tags/Android/"}]},{"title":"Material Design 笔记","slug":"material-design-note","date":"2017-04-21T14:08:13.000Z","updated":"2017-04-21T14:13:12.622Z","comments":true,"path":"2017/04/21/material-design-note/","link":"","permalink":"https://devallever.github.io/2017/04/21/material-design-note/","excerpt":"","text":"1.Toolbar的使用1.1设置应用的主题为NoActionBar1android:theme=&quot;@style/AppTheme&quot; 这个主题在sytle文件中定义123456&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;&lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorGreen_300&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorGreen700&lt;/item&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;&lt;/style&gt; 1.2在布局文件中使用Toolbar控件1234567&lt;android.support.v7.widget.Toolbarandroid:id=&quot;@+id/id_material_design_activity_toolbar&quot;android:layout_width=&quot;match_parent&quot;android:layout_height=&quot;?actionBarSize&quot;android:background=&quot;@color/colorGreen700&quot;android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;/&gt; 1.3在Activity中这样用12Toolbar toolbar = (Toolbar)findViewById(R.id.id_material_design_activity_toolbar);setSupportActionBar(toolbar); 1.4设置toolbar的home图标并设置监听12345ActionBar actionBar = getSupportActionBar();if (actionBar != null)&#123;actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setHomeAsUpIndicator(R.mipmap.ic_arrow_back_white_36dp);&#125; 在onOptionsItemSelected()方法中设置监听123case android.R.id.home:drawerLayout.openDrawer(GravityCompat.START);break; 1.5设置toolbar菜单1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;menu xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:id=&quot;@+id/id_menu_notification&quot; android:title=&quot;Notification&quot; android:icon=&quot;@mipmap/ic_notifications_active_white_24dp&quot; app:showAsAction=&quot;never&quot;/&gt; &lt;item android:id=&quot;@+id/id_menu_sms&quot; android:title=&quot;Notification&quot; android:icon=&quot;@mipmap/ic_sms_white_24dp&quot; app:showAsAction=&quot;never&quot;/&gt; &lt;item android:id=&quot;@+id/id_menu_person&quot; android:title=&quot;Notification&quot; android:icon=&quot;@mipmap/ic_person_outline_white_24dp&quot; app:showAsAction=&quot;never&quot;/&gt; &lt;/menu&gt; 然后在Activity中加载这个菜单 1234567891011121314151617181920212223242526@Overridepublic boolean onCreateOptionsMenu(Menu menu) &#123; getMenuInflater().inflate(R.menu.toolbar_menu,menu); return true;&#125;@Overridepublic boolean onOptionsItemSelected(MenuItem item) &#123; int id = item.getItemId(); switch (id)&#123; case R.id.id_menu_notification: Toast.makeText(this,&quot;Notification&quot;,Toast.LENGTH_SHORT).show(); break; case R.id.id_menu_sms: Toast.makeText(this,&quot;SMS&quot;,Toast.LENGTH_SHORT).show(); break; case R.id.id_menu_person: Toast.makeText(this,&quot;Contacts&quot;,Toast.LENGTH_SHORT).show(); break; case android.R.id.home: drawerLayout.openDrawer(GravityCompat.START); break; &#125; return true;&#125; 2.DrawerLayout与NavigationView的爱恨情仇2.1在布局中使用DrawerLayout和NavigationView1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/id_material_design_activity_drawer_layout&quot;&gt; &lt;android.support.design.widget.CoordinatorLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;&lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/id_material_design_activity_toolbar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?actionBarSize&quot; android:background=&quot;@color/colorGreen700&quot; android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot; app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;/&gt; &lt;android.support.design.widget.FloatingActionButton android:id=&quot;@+id/id_material_design_activity_fab&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;bottom|right&quot; android:layout_margin=&quot;16dp&quot; android:src=&quot;@mipmap/ic_notifications_active_white_24dp&quot; app:elevation=&quot;8dp&quot;/&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; &lt;android.support.design.widget.NavigationView android:id=&quot;@+id/id_material_design_navigation_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_gravity=&quot;start&quot; app:menu=&quot;@menu/nav_menu&quot; app:headerLayout=&quot;@layout/nav_header_layout&quot;/&gt; &lt;/android.support.v4.widget.DrawerLayout&gt; 其中NavigationVIew包含一个menu菜单和头布局nav_menu.xml123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt; &lt;group android:checkableBehavior=&quot;single&quot;&gt; &lt;item android:id=&quot;@+id/id_nav_menu_item_like&quot; android:icon=&quot;@mipmap/ic_favorite_black_24dp&quot; android:title=&quot;Like&quot;/&gt; &lt;item android:id=&quot;@+id/id_nav_menu_item_alarm&quot; android:icon=&quot;@mipmap/ic_alarm_black_24dp&quot; android:title=&quot;Alarm&quot;/&gt; &lt;item android:id=&quot;@+id/id_nav_menu_item_account&quot; android:icon=&quot;@mipmap/ic_account_circle_black_24dp&quot; android:title=&quot;Account&quot;/&gt; &lt;item android:id=&quot;@+id/id_nav_menu_item_setting&quot; android:icon=&quot;@mipmap/ic_build_black_24dp&quot; android:title=&quot;Setting&quot;/&gt; &lt;/group&gt; &lt;/menu&gt; nav_header_layout1234567891011121314151617181920212223242526272829303132&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;180dp&quot; android:padding=&quot;10dp&quot; android:background=&quot;@color/colorGreen700&quot;&gt; &lt;de.hdodenhof.circleimageview.CircleImageView android:id=&quot;@+id/id_nav_header_iv_head&quot; android:layout_width=&quot;70dp&quot; android:layout_height=&quot;70dp&quot; android:src=&quot;@mipmap/h_01&quot; android:layout_centerInParent=&quot;true&quot;/&gt; &lt;TextView android:id=&quot;@+id/id_nav_header_tv_email&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;devallever@163.com&quot; android:textColor=&quot;@color/white&quot; android:layout_alignParentBottom=&quot;true&quot;/&gt; &lt;TextView android:id=&quot;@+id/id_nav_header_tv_username&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginBottom=&quot;5dp&quot; android:text=&quot;Devallever&quot; android:textColor=&quot;@color/white&quot; android:layout_above=&quot;@id/id_nav_header_tv_email&quot;/&gt; &lt;/RelativeLayout&gt; 2.2设置NavigationView的菜单监听1234567891011121314151617181920212223navigationView = (NavigationView)findViewById(R.id.id_material_design_navigation_view);navigationView.setCheckedItem(R.id.id_nav_menu_item_like);navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() &#123; @Override public boolean onNavigationItemSelected(@NonNull MenuItem item) &#123; int id = item.getItemId(); switch (id)&#123; case R.id.id_nav_menu_item_like: Toast.makeText(MaterialDesignActivity.this, &quot;Like&quot;,Toast.LENGTH_SHORT).show(); break; case R.id.id_nav_menu_item_account: Toast.makeText(MaterialDesignActivity.this, &quot;Account&quot;,Toast.LENGTH_SHORT).show(); break; case R.id.id_nav_menu_item_alarm: Toast.makeText(MaterialDesignActivity.this, &quot;Alarm&quot;,Toast.LENGTH_SHORT).show(); break; case R.id.id_nav_menu_item_setting: Toast.makeText(MaterialDesignActivity.this, &quot;Setting&quot;,Toast.LENGTH_SHORT).show(); break; &#125; return true; &#125;&#125;); 2.3把toolbar与NavigationView关联起来，并实现home的动画效果123ActionBarDrawerToggle actionBarDrawerToggle = new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.app_name, R.string.app_name);actionBarDrawerToggle.syncState(); 3FloatActionButton3.1在布局中使用FloatActionButton控件12345678&lt;android.support.design.widget.FloatingActionButton android:id=&quot;@+id/id_material_design_activity_fab&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;bottom|right&quot; android:layout_margin=&quot;16dp&quot; android:src=&quot;@mipmap/ic_notifications_active_white_24dp&quot; app:elevation=&quot;8dp&quot;/&gt; 3.2设置监听，和一般的按钮设置监听是一样的123456fab.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; &#125;&#125;); 4Snackbar当点击按钮时候弹出Snackbar12345678910111213fab.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Snackbar.make(v, &quot;Remind!&quot;, Snackbar.LENGTH_INDEFINITE) .setAction(&quot;I know.&quot;, new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Toast.makeText(MaterialDesignActivity.this,&quot;OK&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125;) .show(); &#125;&#125;); 5CoordinatorLayout加强版的FrameLayout123456789101112131415161718192021&lt;android.support.design.widget.CoordinatorLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;&lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/id_material_design_activity_toolbar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?actionBarSize&quot; android:background=&quot;@color/colorGreen700&quot; android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot; app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;/&gt; &lt;android.support.design.widget.FloatingActionButton android:id=&quot;@+id/id_material_design_activity_fab&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;bottom|right&quot; android:layout_margin=&quot;16dp&quot; android:src=&quot;@mipmap/ic_notifications_active_white_24dp&quot; app:elevation=&quot;8dp&quot;/&gt; &lt;/android.support.design.widget.CoordinatorLayout","categories":[{"name":"Android","slug":"Android","permalink":"https://devallever.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://devallever.github.io/tags/Android/"},{"name":"Material Design","slug":"Material-Design","permalink":"https://devallever.github.io/tags/Material-Design/"}]},{"title":"Markdown 教程","slug":"markdown-learn","date":"2017-04-21T08:32:17.000Z","updated":"2017-04-21T09:20:44.418Z","comments":true,"path":"2017/04/21/markdown-learn/","link":"","permalink":"https://devallever.github.io/2017/04/21/markdown-learn/","excerpt":"","text":"『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档』 原文地址 Cmd Markdown 简明语法手册标签： Cmd-Markdown 1. 斜体和粗体使用 和 * 表示斜体和粗体。 示例： 这是 斜体，这是 粗体。 2. 分级标题使用 === 表示一级标题，使用 — 表示二级标题。 示例： 1234567这是一个一级标题============================这是一个二级标题--------------------------------------------------### 这是一个三级标题 你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。 3. 外链接使用 [描述](链接地址) 为文字增加外链接。 示例： 这是去往 本人博客 的链接。 4. 无序列表使用 *，+，- 表示无序列表。 示例： 无序列表项 一 无序列表项 二 无序列表项 三 5. 有序列表使用数字和点表示有序列表。 示例： 有序列表项 一 有序列表项 二 有序列表项 三 6. 文字引用使用 &gt; 表示文字引用。 示例： 野火烧不尽，春风吹又生。 7. 行内代码块使用 `代码` 表示行内代码块。 示例： 让我们聊聊 html。 8. 代码块使用 四个缩进空格 表示代码块。 示例： 这是一个代码块，此行左侧有四个不可见的空格。 9. 插入图像使用 ![描述](图片链接地址) 插入图像。 示例： 我的头像 Cmd Markdown 高阶语法手册1. 内容目录在段落中填写 [TOC] 以显示全文内容的目录结构。 [TOC] 2. 标签分类在编辑区任意行的列首位置输入以下代码给文稿标签： 标签： 数学 英语 Markdown 或者 Tags： 数学 英语 Markdown 3. 删除线使用 ~~ 表示删除线。 这是一段错误的文本。 4. 注脚使用 [^keyword] 表示注脚。 这是一个注脚[^footnote]的样例。 这是第二个注脚[^footnote2]的样例。 5. LaTeX 公式$ 表示行内公式： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 $$ 表示整行公式： $$\\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$\\sum^{j-1}{k=0}{\\widehat{\\gamma}{kj} z_k}$$ 访问 MathJax 参考更多使用方法。 6. 加强的代码块支持四十一种编程语言的语法高亮的显示，行号显示。 非代码示例： 1$ sudo apt-get install vim-gnome Python 示例： 123456789101112@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' JavaScript 示例： 1234567891011121314151617/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a;&#125;document.write(fib(10)); 7. 流程图示例12345678910st=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io 更多语法参考：流程图语法参考8. 序列图示例 1123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 示例 212345Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrow 更多语法参考：序列图语法参考9. 甘特图甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。 12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 更多语法参考：甘特图语法参考10. Mermaid 流程图1234A[Hard edge] --&gt;|Link text| B(Round edge)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result one]C --&gt;|Two| E[Result two] 更多语法参考：Mermaid 流程图语法参考11. Mermaid 序列图1234Alice-&gt;John: Hello John, how are you?loop every minute John--&gt;Alice: Great!end 更多语法参考：Mermaid 序列图语法参考12. 表格支持 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 13. 定义型列表名词 1: 定义 1（左侧有一个可见的冒号和四个不可见的空格） 代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） 14. Html 标签本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格： &lt;table&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt; &lt;th&gt;星期一&lt;/th&gt; &lt;th&gt;星期二&lt;/th&gt; &lt;th&gt;星期三&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李强&lt;/td&gt; &lt;td&gt;张明&lt;/td&gt; &lt;td&gt;王平&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 值班人员 星期一 星期二 星期三 李强 张明 王平 15. 内嵌图标本站的图标系统对外开放，在文档中输入 &lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt; 即显示微博的图标： 替换 上述 i 标签 内的 icon-weibo 以显示不同的图标，例如： &lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt; 即显示人人的图标： 更多的图标和玩法可以参看 font-awesome 官方网站。 16. 待办事宜 Todo 列表使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如： - [ ] **Cmd Markdown 开发** - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 - [ ] 支持以 PDF 格式导出文稿 - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) - [x] 改进 LaTex 功能 - [x] 修复 LaTex 公式渲染问题 - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers) - [ ] **七月旅行准备** - [ ] 准备邮轮上需要携带的物品 - [ ] 浏览日本免税店的物品 - [x] 购买蓝宝石公主号七月一日的船票 对应显示如下待办事宜 Todo 列表： [ ] Cmd Markdown 开发 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [ ] 支持以 PDF 格式导出文稿 [x] 新增Todo列表功能 语法参考 [x] 改进 LaTex 功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 语法参考 [ ] 七月旅行准备 [ ] 准备邮轮上需要携带的物品 [ ] 浏览日本免税店的物品 [x] 购买蓝宝石公主号七月一日的船票 [^footnote]: 这是一个 注脚 的 文本。 [^footnote2]: 这是另一个 注脚 的 文本。","categories":[{"name":"Markdown","slug":"Markdown","permalink":"https://devallever.github.io/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://devallever.github.io/tags/Markdown/"}]},{"title":"Java连接数据库","slug":"Java连接数据库","date":"2017-04-21T05:49:27.000Z","updated":"2017-04-21T09:20:14.465Z","comments":true,"path":"2017/04/21/Java连接数据库/","link":"","permalink":"https://devallever.github.io/2017/04/21/Java连接数据库/","excerpt":"","text":"MySQL provides standards-based drivers for JDBC, ODBC, and .Net enabling developers to build database applications in their language of choice. In addition, a native C library allows developers to embed MySQL directly into their applications. 1.下载相关的驱动程序如 Java与MySQL的连接,可到MySQL官网上下载下载地址 2.数据库的URL格式如: jdbc:mysql://127.0.0.1/dbname在连接数据库时,我们必须使用各种与数据库类型相关的参数,例如主机名,端口号和数据库名jdbc的一般语法:jdbc:subprotocol:other stuff subprotocol:连接数据库的具体驱动程序 other stuff:随subprotocol的不同而不同,应查阅供应商的相关文档 3.注册驱动器类1Class.forName(\"com.mysql.jdbc.Driver\"); 字符串的内容为驱动器类所在包的全路径这条语句使得驱动器类被加载,由此将执行可以注册驱动器的静态初始化器 4.连接到数据库1Connection conn = DriverManager.getConnection(sqlUrl, username, password); 以上三个参数类型都是字符串类型, 连接成功会返回Connection对象,用它去执行SQL语句. 5.操作数据库5.1 基本方法1String sql = \"select nickname, phone from tuser where username='xm'\"; 执行sql命令首先创建Statement对象或其子类PreparedStatement对象12345statement = conn.createStatement();preparedStatement = conn.preparedStatement(sql);ResultSet resultSet = statement.executeQuery(sql);或resultSet = preparedStatement.executeQuery(); executeQuery()方法可以执行select 语句, executeUpdate()方法可以执行insert, update和delete之类的操作. 也可以执行create table 和drop table之类的数据定义语句. execute()方法可以执行任意的sql语句.","categories":[{"name":"Java","slug":"Java","permalink":"https://devallever.github.io/categories/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://devallever.github.io/tags/java/"},{"name":"sql","slug":"sql","permalink":"https://devallever.github.io/tags/sql/"}]},{"title":"Hello Android","slug":"helloAndroid","date":"2017-04-17T14:56:05.454Z","updated":"2017-04-17T14:56:05.438Z","comments":true,"path":"2017/04/17/helloAndroid/","link":"","permalink":"https://devallever.github.io/2017/04/17/helloAndroid/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-04-17T08:48:22.843Z","updated":"2017-04-17T08:48:22.843Z","comments":true,"path":"2017/04/17/hello-world/","link":"","permalink":"https://devallever.github.io/2017/04/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}